
aht10_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ef0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08002fb0  08002fb0  00012fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003054  08003054  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003054  08003054  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003054  08003054  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003054  08003054  00013054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003058  08003058  00013058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800305c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  2000000c  08003068  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08003068  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007030  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000190e  00000000  00000000  000270a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000790  00000000  00000000  000289b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005ac  00000000  00000000  00029148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00010e52  00000000  00000000  000296f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b325  00000000  00000000  0003a546  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000650e2  00000000  00000000  0004586b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000019f4  00000000  00000000  000aa950  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000ac344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002f98 	.word	0x08002f98

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002f98 	.word	0x08002f98

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_fdiv>:
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	464f      	mov	r7, r9
 8000224:	4646      	mov	r6, r8
 8000226:	46d6      	mov	lr, sl
 8000228:	0245      	lsls	r5, r0, #9
 800022a:	b5c0      	push	{r6, r7, lr}
 800022c:	0047      	lsls	r7, r0, #1
 800022e:	1c0c      	adds	r4, r1, #0
 8000230:	0a6d      	lsrs	r5, r5, #9
 8000232:	0e3f      	lsrs	r7, r7, #24
 8000234:	0fc6      	lsrs	r6, r0, #31
 8000236:	2f00      	cmp	r7, #0
 8000238:	d100      	bne.n	800023c <__aeabi_fdiv+0x1c>
 800023a:	e06f      	b.n	800031c <__aeabi_fdiv+0xfc>
 800023c:	2fff      	cmp	r7, #255	; 0xff
 800023e:	d100      	bne.n	8000242 <__aeabi_fdiv+0x22>
 8000240:	e074      	b.n	800032c <__aeabi_fdiv+0x10c>
 8000242:	2300      	movs	r3, #0
 8000244:	2280      	movs	r2, #128	; 0x80
 8000246:	4699      	mov	r9, r3
 8000248:	469a      	mov	sl, r3
 800024a:	00ed      	lsls	r5, r5, #3
 800024c:	04d2      	lsls	r2, r2, #19
 800024e:	4315      	orrs	r5, r2
 8000250:	3f7f      	subs	r7, #127	; 0x7f
 8000252:	0263      	lsls	r3, r4, #9
 8000254:	0a5b      	lsrs	r3, r3, #9
 8000256:	4698      	mov	r8, r3
 8000258:	0063      	lsls	r3, r4, #1
 800025a:	0e1b      	lsrs	r3, r3, #24
 800025c:	0fe4      	lsrs	r4, r4, #31
 800025e:	2b00      	cmp	r3, #0
 8000260:	d04d      	beq.n	80002fe <__aeabi_fdiv+0xde>
 8000262:	2bff      	cmp	r3, #255	; 0xff
 8000264:	d045      	beq.n	80002f2 <__aeabi_fdiv+0xd2>
 8000266:	4642      	mov	r2, r8
 8000268:	2180      	movs	r1, #128	; 0x80
 800026a:	00d2      	lsls	r2, r2, #3
 800026c:	04c9      	lsls	r1, r1, #19
 800026e:	4311      	orrs	r1, r2
 8000270:	4688      	mov	r8, r1
 8000272:	2200      	movs	r2, #0
 8000274:	3b7f      	subs	r3, #127	; 0x7f
 8000276:	0031      	movs	r1, r6
 8000278:	1aff      	subs	r7, r7, r3
 800027a:	464b      	mov	r3, r9
 800027c:	4061      	eors	r1, r4
 800027e:	b2c9      	uxtb	r1, r1
 8000280:	2b0f      	cmp	r3, #15
 8000282:	d900      	bls.n	8000286 <__aeabi_fdiv+0x66>
 8000284:	e0b8      	b.n	80003f8 <__aeabi_fdiv+0x1d8>
 8000286:	4870      	ldr	r0, [pc, #448]	; (8000448 <__aeabi_fdiv+0x228>)
 8000288:	009b      	lsls	r3, r3, #2
 800028a:	58c3      	ldr	r3, [r0, r3]
 800028c:	469f      	mov	pc, r3
 800028e:	2300      	movs	r3, #0
 8000290:	4698      	mov	r8, r3
 8000292:	0026      	movs	r6, r4
 8000294:	4645      	mov	r5, r8
 8000296:	4692      	mov	sl, r2
 8000298:	4653      	mov	r3, sl
 800029a:	2b02      	cmp	r3, #2
 800029c:	d100      	bne.n	80002a0 <__aeabi_fdiv+0x80>
 800029e:	e08d      	b.n	80003bc <__aeabi_fdiv+0x19c>
 80002a0:	2b03      	cmp	r3, #3
 80002a2:	d100      	bne.n	80002a6 <__aeabi_fdiv+0x86>
 80002a4:	e0a1      	b.n	80003ea <__aeabi_fdiv+0x1ca>
 80002a6:	2b01      	cmp	r3, #1
 80002a8:	d018      	beq.n	80002dc <__aeabi_fdiv+0xbc>
 80002aa:	003b      	movs	r3, r7
 80002ac:	337f      	adds	r3, #127	; 0x7f
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	dd6d      	ble.n	800038e <__aeabi_fdiv+0x16e>
 80002b2:	076a      	lsls	r2, r5, #29
 80002b4:	d004      	beq.n	80002c0 <__aeabi_fdiv+0xa0>
 80002b6:	220f      	movs	r2, #15
 80002b8:	402a      	ands	r2, r5
 80002ba:	2a04      	cmp	r2, #4
 80002bc:	d000      	beq.n	80002c0 <__aeabi_fdiv+0xa0>
 80002be:	3504      	adds	r5, #4
 80002c0:	012a      	lsls	r2, r5, #4
 80002c2:	d503      	bpl.n	80002cc <__aeabi_fdiv+0xac>
 80002c4:	4b61      	ldr	r3, [pc, #388]	; (800044c <__aeabi_fdiv+0x22c>)
 80002c6:	401d      	ands	r5, r3
 80002c8:	003b      	movs	r3, r7
 80002ca:	3380      	adds	r3, #128	; 0x80
 80002cc:	2bfe      	cmp	r3, #254	; 0xfe
 80002ce:	dd00      	ble.n	80002d2 <__aeabi_fdiv+0xb2>
 80002d0:	e074      	b.n	80003bc <__aeabi_fdiv+0x19c>
 80002d2:	01aa      	lsls	r2, r5, #6
 80002d4:	0a52      	lsrs	r2, r2, #9
 80002d6:	b2d8      	uxtb	r0, r3
 80002d8:	e002      	b.n	80002e0 <__aeabi_fdiv+0xc0>
 80002da:	000e      	movs	r6, r1
 80002dc:	2000      	movs	r0, #0
 80002de:	2200      	movs	r2, #0
 80002e0:	05c0      	lsls	r0, r0, #23
 80002e2:	07f6      	lsls	r6, r6, #31
 80002e4:	4310      	orrs	r0, r2
 80002e6:	4330      	orrs	r0, r6
 80002e8:	bce0      	pop	{r5, r6, r7}
 80002ea:	46ba      	mov	sl, r7
 80002ec:	46b1      	mov	r9, r6
 80002ee:	46a8      	mov	r8, r5
 80002f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002f2:	4643      	mov	r3, r8
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d13f      	bne.n	8000378 <__aeabi_fdiv+0x158>
 80002f8:	2202      	movs	r2, #2
 80002fa:	3fff      	subs	r7, #255	; 0xff
 80002fc:	e003      	b.n	8000306 <__aeabi_fdiv+0xe6>
 80002fe:	4643      	mov	r3, r8
 8000300:	2b00      	cmp	r3, #0
 8000302:	d12d      	bne.n	8000360 <__aeabi_fdiv+0x140>
 8000304:	2201      	movs	r2, #1
 8000306:	0031      	movs	r1, r6
 8000308:	464b      	mov	r3, r9
 800030a:	4061      	eors	r1, r4
 800030c:	b2c9      	uxtb	r1, r1
 800030e:	4313      	orrs	r3, r2
 8000310:	2b0f      	cmp	r3, #15
 8000312:	d838      	bhi.n	8000386 <__aeabi_fdiv+0x166>
 8000314:	484e      	ldr	r0, [pc, #312]	; (8000450 <__aeabi_fdiv+0x230>)
 8000316:	009b      	lsls	r3, r3, #2
 8000318:	58c3      	ldr	r3, [r0, r3]
 800031a:	469f      	mov	pc, r3
 800031c:	2d00      	cmp	r5, #0
 800031e:	d113      	bne.n	8000348 <__aeabi_fdiv+0x128>
 8000320:	2304      	movs	r3, #4
 8000322:	4699      	mov	r9, r3
 8000324:	3b03      	subs	r3, #3
 8000326:	2700      	movs	r7, #0
 8000328:	469a      	mov	sl, r3
 800032a:	e792      	b.n	8000252 <__aeabi_fdiv+0x32>
 800032c:	2d00      	cmp	r5, #0
 800032e:	d105      	bne.n	800033c <__aeabi_fdiv+0x11c>
 8000330:	2308      	movs	r3, #8
 8000332:	4699      	mov	r9, r3
 8000334:	3b06      	subs	r3, #6
 8000336:	27ff      	movs	r7, #255	; 0xff
 8000338:	469a      	mov	sl, r3
 800033a:	e78a      	b.n	8000252 <__aeabi_fdiv+0x32>
 800033c:	230c      	movs	r3, #12
 800033e:	4699      	mov	r9, r3
 8000340:	3b09      	subs	r3, #9
 8000342:	27ff      	movs	r7, #255	; 0xff
 8000344:	469a      	mov	sl, r3
 8000346:	e784      	b.n	8000252 <__aeabi_fdiv+0x32>
 8000348:	0028      	movs	r0, r5
 800034a:	f000 fbb9 	bl	8000ac0 <__clzsi2>
 800034e:	2776      	movs	r7, #118	; 0x76
 8000350:	1f43      	subs	r3, r0, #5
 8000352:	409d      	lsls	r5, r3
 8000354:	2300      	movs	r3, #0
 8000356:	427f      	negs	r7, r7
 8000358:	4699      	mov	r9, r3
 800035a:	469a      	mov	sl, r3
 800035c:	1a3f      	subs	r7, r7, r0
 800035e:	e778      	b.n	8000252 <__aeabi_fdiv+0x32>
 8000360:	4640      	mov	r0, r8
 8000362:	f000 fbad 	bl	8000ac0 <__clzsi2>
 8000366:	4642      	mov	r2, r8
 8000368:	1f43      	subs	r3, r0, #5
 800036a:	409a      	lsls	r2, r3
 800036c:	2376      	movs	r3, #118	; 0x76
 800036e:	425b      	negs	r3, r3
 8000370:	4690      	mov	r8, r2
 8000372:	1a1b      	subs	r3, r3, r0
 8000374:	2200      	movs	r2, #0
 8000376:	e77e      	b.n	8000276 <__aeabi_fdiv+0x56>
 8000378:	2303      	movs	r3, #3
 800037a:	464a      	mov	r2, r9
 800037c:	431a      	orrs	r2, r3
 800037e:	4691      	mov	r9, r2
 8000380:	33fc      	adds	r3, #252	; 0xfc
 8000382:	2203      	movs	r2, #3
 8000384:	e777      	b.n	8000276 <__aeabi_fdiv+0x56>
 8000386:	000e      	movs	r6, r1
 8000388:	20ff      	movs	r0, #255	; 0xff
 800038a:	2200      	movs	r2, #0
 800038c:	e7a8      	b.n	80002e0 <__aeabi_fdiv+0xc0>
 800038e:	2201      	movs	r2, #1
 8000390:	1ad3      	subs	r3, r2, r3
 8000392:	2b1b      	cmp	r3, #27
 8000394:	dca2      	bgt.n	80002dc <__aeabi_fdiv+0xbc>
 8000396:	379e      	adds	r7, #158	; 0x9e
 8000398:	002a      	movs	r2, r5
 800039a:	40bd      	lsls	r5, r7
 800039c:	40da      	lsrs	r2, r3
 800039e:	1e6b      	subs	r3, r5, #1
 80003a0:	419d      	sbcs	r5, r3
 80003a2:	4315      	orrs	r5, r2
 80003a4:	076a      	lsls	r2, r5, #29
 80003a6:	d004      	beq.n	80003b2 <__aeabi_fdiv+0x192>
 80003a8:	220f      	movs	r2, #15
 80003aa:	402a      	ands	r2, r5
 80003ac:	2a04      	cmp	r2, #4
 80003ae:	d000      	beq.n	80003b2 <__aeabi_fdiv+0x192>
 80003b0:	3504      	adds	r5, #4
 80003b2:	016a      	lsls	r2, r5, #5
 80003b4:	d544      	bpl.n	8000440 <__aeabi_fdiv+0x220>
 80003b6:	2001      	movs	r0, #1
 80003b8:	2200      	movs	r2, #0
 80003ba:	e791      	b.n	80002e0 <__aeabi_fdiv+0xc0>
 80003bc:	20ff      	movs	r0, #255	; 0xff
 80003be:	2200      	movs	r2, #0
 80003c0:	e78e      	b.n	80002e0 <__aeabi_fdiv+0xc0>
 80003c2:	2280      	movs	r2, #128	; 0x80
 80003c4:	2600      	movs	r6, #0
 80003c6:	20ff      	movs	r0, #255	; 0xff
 80003c8:	03d2      	lsls	r2, r2, #15
 80003ca:	e789      	b.n	80002e0 <__aeabi_fdiv+0xc0>
 80003cc:	2300      	movs	r3, #0
 80003ce:	4698      	mov	r8, r3
 80003d0:	2280      	movs	r2, #128	; 0x80
 80003d2:	03d2      	lsls	r2, r2, #15
 80003d4:	4215      	tst	r5, r2
 80003d6:	d008      	beq.n	80003ea <__aeabi_fdiv+0x1ca>
 80003d8:	4643      	mov	r3, r8
 80003da:	4213      	tst	r3, r2
 80003dc:	d105      	bne.n	80003ea <__aeabi_fdiv+0x1ca>
 80003de:	431a      	orrs	r2, r3
 80003e0:	0252      	lsls	r2, r2, #9
 80003e2:	0026      	movs	r6, r4
 80003e4:	20ff      	movs	r0, #255	; 0xff
 80003e6:	0a52      	lsrs	r2, r2, #9
 80003e8:	e77a      	b.n	80002e0 <__aeabi_fdiv+0xc0>
 80003ea:	2280      	movs	r2, #128	; 0x80
 80003ec:	03d2      	lsls	r2, r2, #15
 80003ee:	432a      	orrs	r2, r5
 80003f0:	0252      	lsls	r2, r2, #9
 80003f2:	20ff      	movs	r0, #255	; 0xff
 80003f4:	0a52      	lsrs	r2, r2, #9
 80003f6:	e773      	b.n	80002e0 <__aeabi_fdiv+0xc0>
 80003f8:	4642      	mov	r2, r8
 80003fa:	016b      	lsls	r3, r5, #5
 80003fc:	0155      	lsls	r5, r2, #5
 80003fe:	42ab      	cmp	r3, r5
 8000400:	d21a      	bcs.n	8000438 <__aeabi_fdiv+0x218>
 8000402:	201b      	movs	r0, #27
 8000404:	2200      	movs	r2, #0
 8000406:	3f01      	subs	r7, #1
 8000408:	2601      	movs	r6, #1
 800040a:	001c      	movs	r4, r3
 800040c:	0052      	lsls	r2, r2, #1
 800040e:	005b      	lsls	r3, r3, #1
 8000410:	2c00      	cmp	r4, #0
 8000412:	db01      	blt.n	8000418 <__aeabi_fdiv+0x1f8>
 8000414:	429d      	cmp	r5, r3
 8000416:	d801      	bhi.n	800041c <__aeabi_fdiv+0x1fc>
 8000418:	1b5b      	subs	r3, r3, r5
 800041a:	4332      	orrs	r2, r6
 800041c:	3801      	subs	r0, #1
 800041e:	2800      	cmp	r0, #0
 8000420:	d1f3      	bne.n	800040a <__aeabi_fdiv+0x1ea>
 8000422:	1e58      	subs	r0, r3, #1
 8000424:	4183      	sbcs	r3, r0
 8000426:	4313      	orrs	r3, r2
 8000428:	001d      	movs	r5, r3
 800042a:	003b      	movs	r3, r7
 800042c:	337f      	adds	r3, #127	; 0x7f
 800042e:	000e      	movs	r6, r1
 8000430:	2b00      	cmp	r3, #0
 8000432:	dd00      	ble.n	8000436 <__aeabi_fdiv+0x216>
 8000434:	e73d      	b.n	80002b2 <__aeabi_fdiv+0x92>
 8000436:	e7aa      	b.n	800038e <__aeabi_fdiv+0x16e>
 8000438:	201a      	movs	r0, #26
 800043a:	2201      	movs	r2, #1
 800043c:	1b5b      	subs	r3, r3, r5
 800043e:	e7e3      	b.n	8000408 <__aeabi_fdiv+0x1e8>
 8000440:	01aa      	lsls	r2, r5, #6
 8000442:	2000      	movs	r0, #0
 8000444:	0a52      	lsrs	r2, r2, #9
 8000446:	e74b      	b.n	80002e0 <__aeabi_fdiv+0xc0>
 8000448:	08002fb8 	.word	0x08002fb8
 800044c:	f7ffffff 	.word	0xf7ffffff
 8000450:	08002ff8 	.word	0x08002ff8

08000454 <__aeabi_fmul>:
 8000454:	0243      	lsls	r3, r0, #9
 8000456:	0a5b      	lsrs	r3, r3, #9
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	464f      	mov	r7, r9
 800045c:	4646      	mov	r6, r8
 800045e:	4699      	mov	r9, r3
 8000460:	46d6      	mov	lr, sl
 8000462:	0fc3      	lsrs	r3, r0, #31
 8000464:	0045      	lsls	r5, r0, #1
 8000466:	4698      	mov	r8, r3
 8000468:	b5c0      	push	{r6, r7, lr}
 800046a:	464b      	mov	r3, r9
 800046c:	1c0f      	adds	r7, r1, #0
 800046e:	0e2d      	lsrs	r5, r5, #24
 8000470:	d100      	bne.n	8000474 <__aeabi_fmul+0x20>
 8000472:	e0cb      	b.n	800060c <__aeabi_fmul+0x1b8>
 8000474:	2dff      	cmp	r5, #255	; 0xff
 8000476:	d100      	bne.n	800047a <__aeabi_fmul+0x26>
 8000478:	e0cf      	b.n	800061a <__aeabi_fmul+0x1c6>
 800047a:	2280      	movs	r2, #128	; 0x80
 800047c:	00db      	lsls	r3, r3, #3
 800047e:	04d2      	lsls	r2, r2, #19
 8000480:	431a      	orrs	r2, r3
 8000482:	2300      	movs	r3, #0
 8000484:	4691      	mov	r9, r2
 8000486:	2600      	movs	r6, #0
 8000488:	469a      	mov	sl, r3
 800048a:	3d7f      	subs	r5, #127	; 0x7f
 800048c:	027c      	lsls	r4, r7, #9
 800048e:	007b      	lsls	r3, r7, #1
 8000490:	0a64      	lsrs	r4, r4, #9
 8000492:	0e1b      	lsrs	r3, r3, #24
 8000494:	0fff      	lsrs	r7, r7, #31
 8000496:	2b00      	cmp	r3, #0
 8000498:	d100      	bne.n	800049c <__aeabi_fmul+0x48>
 800049a:	e0a9      	b.n	80005f0 <__aeabi_fmul+0x19c>
 800049c:	2bff      	cmp	r3, #255	; 0xff
 800049e:	d011      	beq.n	80004c4 <__aeabi_fmul+0x70>
 80004a0:	2280      	movs	r2, #128	; 0x80
 80004a2:	00e4      	lsls	r4, r4, #3
 80004a4:	04d2      	lsls	r2, r2, #19
 80004a6:	4314      	orrs	r4, r2
 80004a8:	4642      	mov	r2, r8
 80004aa:	3b7f      	subs	r3, #127	; 0x7f
 80004ac:	195b      	adds	r3, r3, r5
 80004ae:	407a      	eors	r2, r7
 80004b0:	2000      	movs	r0, #0
 80004b2:	b2d2      	uxtb	r2, r2
 80004b4:	1c5d      	adds	r5, r3, #1
 80004b6:	2e0a      	cmp	r6, #10
 80004b8:	dd13      	ble.n	80004e2 <__aeabi_fmul+0x8e>
 80004ba:	003a      	movs	r2, r7
 80004bc:	2e0b      	cmp	r6, #11
 80004be:	d047      	beq.n	8000550 <__aeabi_fmul+0xfc>
 80004c0:	4647      	mov	r7, r8
 80004c2:	e03f      	b.n	8000544 <__aeabi_fmul+0xf0>
 80004c4:	002b      	movs	r3, r5
 80004c6:	33ff      	adds	r3, #255	; 0xff
 80004c8:	2c00      	cmp	r4, #0
 80004ca:	d11e      	bne.n	800050a <__aeabi_fmul+0xb6>
 80004cc:	2202      	movs	r2, #2
 80004ce:	4316      	orrs	r6, r2
 80004d0:	4642      	mov	r2, r8
 80004d2:	3501      	adds	r5, #1
 80004d4:	407a      	eors	r2, r7
 80004d6:	b2d2      	uxtb	r2, r2
 80004d8:	35ff      	adds	r5, #255	; 0xff
 80004da:	2e0a      	cmp	r6, #10
 80004dc:	dd00      	ble.n	80004e0 <__aeabi_fmul+0x8c>
 80004de:	e0e4      	b.n	80006aa <__aeabi_fmul+0x256>
 80004e0:	2002      	movs	r0, #2
 80004e2:	2e02      	cmp	r6, #2
 80004e4:	dc1c      	bgt.n	8000520 <__aeabi_fmul+0xcc>
 80004e6:	3e01      	subs	r6, #1
 80004e8:	2e01      	cmp	r6, #1
 80004ea:	d842      	bhi.n	8000572 <__aeabi_fmul+0x11e>
 80004ec:	2802      	cmp	r0, #2
 80004ee:	d03d      	beq.n	800056c <__aeabi_fmul+0x118>
 80004f0:	2801      	cmp	r0, #1
 80004f2:	d166      	bne.n	80005c2 <__aeabi_fmul+0x16e>
 80004f4:	2000      	movs	r0, #0
 80004f6:	2100      	movs	r1, #0
 80004f8:	05c0      	lsls	r0, r0, #23
 80004fa:	4308      	orrs	r0, r1
 80004fc:	07d2      	lsls	r2, r2, #31
 80004fe:	4310      	orrs	r0, r2
 8000500:	bce0      	pop	{r5, r6, r7}
 8000502:	46ba      	mov	sl, r7
 8000504:	46b1      	mov	r9, r6
 8000506:	46a8      	mov	r8, r5
 8000508:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800050a:	2203      	movs	r2, #3
 800050c:	4316      	orrs	r6, r2
 800050e:	4642      	mov	r2, r8
 8000510:	3501      	adds	r5, #1
 8000512:	407a      	eors	r2, r7
 8000514:	b2d2      	uxtb	r2, r2
 8000516:	35ff      	adds	r5, #255	; 0xff
 8000518:	2e0a      	cmp	r6, #10
 800051a:	dd00      	ble.n	800051e <__aeabi_fmul+0xca>
 800051c:	e0e4      	b.n	80006e8 <__aeabi_fmul+0x294>
 800051e:	2003      	movs	r0, #3
 8000520:	2101      	movs	r1, #1
 8000522:	40b1      	lsls	r1, r6
 8000524:	26a6      	movs	r6, #166	; 0xa6
 8000526:	00f6      	lsls	r6, r6, #3
 8000528:	4231      	tst	r1, r6
 800052a:	d10a      	bne.n	8000542 <__aeabi_fmul+0xee>
 800052c:	2690      	movs	r6, #144	; 0x90
 800052e:	00b6      	lsls	r6, r6, #2
 8000530:	4231      	tst	r1, r6
 8000532:	d116      	bne.n	8000562 <__aeabi_fmul+0x10e>
 8000534:	3eb9      	subs	r6, #185	; 0xb9
 8000536:	3eff      	subs	r6, #255	; 0xff
 8000538:	420e      	tst	r6, r1
 800053a:	d01a      	beq.n	8000572 <__aeabi_fmul+0x11e>
 800053c:	46a1      	mov	r9, r4
 800053e:	4682      	mov	sl, r0
 8000540:	e000      	b.n	8000544 <__aeabi_fmul+0xf0>
 8000542:	0017      	movs	r7, r2
 8000544:	4653      	mov	r3, sl
 8000546:	003a      	movs	r2, r7
 8000548:	2b02      	cmp	r3, #2
 800054a:	d00f      	beq.n	800056c <__aeabi_fmul+0x118>
 800054c:	464c      	mov	r4, r9
 800054e:	4650      	mov	r0, sl
 8000550:	2803      	cmp	r0, #3
 8000552:	d1cd      	bne.n	80004f0 <__aeabi_fmul+0x9c>
 8000554:	2180      	movs	r1, #128	; 0x80
 8000556:	03c9      	lsls	r1, r1, #15
 8000558:	4321      	orrs	r1, r4
 800055a:	0249      	lsls	r1, r1, #9
 800055c:	20ff      	movs	r0, #255	; 0xff
 800055e:	0a49      	lsrs	r1, r1, #9
 8000560:	e7ca      	b.n	80004f8 <__aeabi_fmul+0xa4>
 8000562:	2180      	movs	r1, #128	; 0x80
 8000564:	2200      	movs	r2, #0
 8000566:	20ff      	movs	r0, #255	; 0xff
 8000568:	03c9      	lsls	r1, r1, #15
 800056a:	e7c5      	b.n	80004f8 <__aeabi_fmul+0xa4>
 800056c:	20ff      	movs	r0, #255	; 0xff
 800056e:	2100      	movs	r1, #0
 8000570:	e7c2      	b.n	80004f8 <__aeabi_fmul+0xa4>
 8000572:	0c20      	lsrs	r0, r4, #16
 8000574:	4649      	mov	r1, r9
 8000576:	0424      	lsls	r4, r4, #16
 8000578:	0c24      	lsrs	r4, r4, #16
 800057a:	0027      	movs	r7, r4
 800057c:	0c0e      	lsrs	r6, r1, #16
 800057e:	0409      	lsls	r1, r1, #16
 8000580:	0c09      	lsrs	r1, r1, #16
 8000582:	4374      	muls	r4, r6
 8000584:	434f      	muls	r7, r1
 8000586:	4346      	muls	r6, r0
 8000588:	4348      	muls	r0, r1
 800058a:	0c39      	lsrs	r1, r7, #16
 800058c:	1900      	adds	r0, r0, r4
 800058e:	1809      	adds	r1, r1, r0
 8000590:	428c      	cmp	r4, r1
 8000592:	d903      	bls.n	800059c <__aeabi_fmul+0x148>
 8000594:	2080      	movs	r0, #128	; 0x80
 8000596:	0240      	lsls	r0, r0, #9
 8000598:	4684      	mov	ip, r0
 800059a:	4466      	add	r6, ip
 800059c:	043f      	lsls	r7, r7, #16
 800059e:	0408      	lsls	r0, r1, #16
 80005a0:	0c3f      	lsrs	r7, r7, #16
 80005a2:	19c0      	adds	r0, r0, r7
 80005a4:	0184      	lsls	r4, r0, #6
 80005a6:	1e67      	subs	r7, r4, #1
 80005a8:	41bc      	sbcs	r4, r7
 80005aa:	0c09      	lsrs	r1, r1, #16
 80005ac:	0e80      	lsrs	r0, r0, #26
 80005ae:	1989      	adds	r1, r1, r6
 80005b0:	4304      	orrs	r4, r0
 80005b2:	0189      	lsls	r1, r1, #6
 80005b4:	430c      	orrs	r4, r1
 80005b6:	0109      	lsls	r1, r1, #4
 80005b8:	d571      	bpl.n	800069e <__aeabi_fmul+0x24a>
 80005ba:	2301      	movs	r3, #1
 80005bc:	0861      	lsrs	r1, r4, #1
 80005be:	401c      	ands	r4, r3
 80005c0:	430c      	orrs	r4, r1
 80005c2:	002b      	movs	r3, r5
 80005c4:	337f      	adds	r3, #127	; 0x7f
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	dd51      	ble.n	800066e <__aeabi_fmul+0x21a>
 80005ca:	0761      	lsls	r1, r4, #29
 80005cc:	d004      	beq.n	80005d8 <__aeabi_fmul+0x184>
 80005ce:	210f      	movs	r1, #15
 80005d0:	4021      	ands	r1, r4
 80005d2:	2904      	cmp	r1, #4
 80005d4:	d000      	beq.n	80005d8 <__aeabi_fmul+0x184>
 80005d6:	3404      	adds	r4, #4
 80005d8:	0121      	lsls	r1, r4, #4
 80005da:	d503      	bpl.n	80005e4 <__aeabi_fmul+0x190>
 80005dc:	4b43      	ldr	r3, [pc, #268]	; (80006ec <__aeabi_fmul+0x298>)
 80005de:	401c      	ands	r4, r3
 80005e0:	002b      	movs	r3, r5
 80005e2:	3380      	adds	r3, #128	; 0x80
 80005e4:	2bfe      	cmp	r3, #254	; 0xfe
 80005e6:	dcc1      	bgt.n	800056c <__aeabi_fmul+0x118>
 80005e8:	01a1      	lsls	r1, r4, #6
 80005ea:	0a49      	lsrs	r1, r1, #9
 80005ec:	b2d8      	uxtb	r0, r3
 80005ee:	e783      	b.n	80004f8 <__aeabi_fmul+0xa4>
 80005f0:	2c00      	cmp	r4, #0
 80005f2:	d12c      	bne.n	800064e <__aeabi_fmul+0x1fa>
 80005f4:	2301      	movs	r3, #1
 80005f6:	4642      	mov	r2, r8
 80005f8:	431e      	orrs	r6, r3
 80005fa:	002b      	movs	r3, r5
 80005fc:	407a      	eors	r2, r7
 80005fe:	2001      	movs	r0, #1
 8000600:	b2d2      	uxtb	r2, r2
 8000602:	1c5d      	adds	r5, r3, #1
 8000604:	2e0a      	cmp	r6, #10
 8000606:	dd00      	ble.n	800060a <__aeabi_fmul+0x1b6>
 8000608:	e757      	b.n	80004ba <__aeabi_fmul+0x66>
 800060a:	e76a      	b.n	80004e2 <__aeabi_fmul+0x8e>
 800060c:	2b00      	cmp	r3, #0
 800060e:	d110      	bne.n	8000632 <__aeabi_fmul+0x1de>
 8000610:	2301      	movs	r3, #1
 8000612:	2604      	movs	r6, #4
 8000614:	2500      	movs	r5, #0
 8000616:	469a      	mov	sl, r3
 8000618:	e738      	b.n	800048c <__aeabi_fmul+0x38>
 800061a:	2b00      	cmp	r3, #0
 800061c:	d104      	bne.n	8000628 <__aeabi_fmul+0x1d4>
 800061e:	2302      	movs	r3, #2
 8000620:	2608      	movs	r6, #8
 8000622:	25ff      	movs	r5, #255	; 0xff
 8000624:	469a      	mov	sl, r3
 8000626:	e731      	b.n	800048c <__aeabi_fmul+0x38>
 8000628:	2303      	movs	r3, #3
 800062a:	260c      	movs	r6, #12
 800062c:	25ff      	movs	r5, #255	; 0xff
 800062e:	469a      	mov	sl, r3
 8000630:	e72c      	b.n	800048c <__aeabi_fmul+0x38>
 8000632:	4648      	mov	r0, r9
 8000634:	f000 fa44 	bl	8000ac0 <__clzsi2>
 8000638:	464a      	mov	r2, r9
 800063a:	1f43      	subs	r3, r0, #5
 800063c:	2576      	movs	r5, #118	; 0x76
 800063e:	409a      	lsls	r2, r3
 8000640:	2300      	movs	r3, #0
 8000642:	426d      	negs	r5, r5
 8000644:	4691      	mov	r9, r2
 8000646:	2600      	movs	r6, #0
 8000648:	469a      	mov	sl, r3
 800064a:	1a2d      	subs	r5, r5, r0
 800064c:	e71e      	b.n	800048c <__aeabi_fmul+0x38>
 800064e:	0020      	movs	r0, r4
 8000650:	f000 fa36 	bl	8000ac0 <__clzsi2>
 8000654:	4642      	mov	r2, r8
 8000656:	1f43      	subs	r3, r0, #5
 8000658:	409c      	lsls	r4, r3
 800065a:	1a2b      	subs	r3, r5, r0
 800065c:	3b76      	subs	r3, #118	; 0x76
 800065e:	407a      	eors	r2, r7
 8000660:	2000      	movs	r0, #0
 8000662:	b2d2      	uxtb	r2, r2
 8000664:	1c5d      	adds	r5, r3, #1
 8000666:	2e0a      	cmp	r6, #10
 8000668:	dd00      	ble.n	800066c <__aeabi_fmul+0x218>
 800066a:	e726      	b.n	80004ba <__aeabi_fmul+0x66>
 800066c:	e739      	b.n	80004e2 <__aeabi_fmul+0x8e>
 800066e:	2101      	movs	r1, #1
 8000670:	1acb      	subs	r3, r1, r3
 8000672:	2b1b      	cmp	r3, #27
 8000674:	dd00      	ble.n	8000678 <__aeabi_fmul+0x224>
 8000676:	e73d      	b.n	80004f4 <__aeabi_fmul+0xa0>
 8000678:	359e      	adds	r5, #158	; 0x9e
 800067a:	0021      	movs	r1, r4
 800067c:	40ac      	lsls	r4, r5
 800067e:	40d9      	lsrs	r1, r3
 8000680:	1e63      	subs	r3, r4, #1
 8000682:	419c      	sbcs	r4, r3
 8000684:	4321      	orrs	r1, r4
 8000686:	074b      	lsls	r3, r1, #29
 8000688:	d004      	beq.n	8000694 <__aeabi_fmul+0x240>
 800068a:	230f      	movs	r3, #15
 800068c:	400b      	ands	r3, r1
 800068e:	2b04      	cmp	r3, #4
 8000690:	d000      	beq.n	8000694 <__aeabi_fmul+0x240>
 8000692:	3104      	adds	r1, #4
 8000694:	014b      	lsls	r3, r1, #5
 8000696:	d504      	bpl.n	80006a2 <__aeabi_fmul+0x24e>
 8000698:	2001      	movs	r0, #1
 800069a:	2100      	movs	r1, #0
 800069c:	e72c      	b.n	80004f8 <__aeabi_fmul+0xa4>
 800069e:	001d      	movs	r5, r3
 80006a0:	e78f      	b.n	80005c2 <__aeabi_fmul+0x16e>
 80006a2:	0189      	lsls	r1, r1, #6
 80006a4:	2000      	movs	r0, #0
 80006a6:	0a49      	lsrs	r1, r1, #9
 80006a8:	e726      	b.n	80004f8 <__aeabi_fmul+0xa4>
 80006aa:	2302      	movs	r3, #2
 80006ac:	2e0f      	cmp	r6, #15
 80006ae:	d10c      	bne.n	80006ca <__aeabi_fmul+0x276>
 80006b0:	2180      	movs	r1, #128	; 0x80
 80006b2:	464b      	mov	r3, r9
 80006b4:	03c9      	lsls	r1, r1, #15
 80006b6:	420b      	tst	r3, r1
 80006b8:	d00d      	beq.n	80006d6 <__aeabi_fmul+0x282>
 80006ba:	420c      	tst	r4, r1
 80006bc:	d10b      	bne.n	80006d6 <__aeabi_fmul+0x282>
 80006be:	4321      	orrs	r1, r4
 80006c0:	0249      	lsls	r1, r1, #9
 80006c2:	003a      	movs	r2, r7
 80006c4:	20ff      	movs	r0, #255	; 0xff
 80006c6:	0a49      	lsrs	r1, r1, #9
 80006c8:	e716      	b.n	80004f8 <__aeabi_fmul+0xa4>
 80006ca:	2e0b      	cmp	r6, #11
 80006cc:	d000      	beq.n	80006d0 <__aeabi_fmul+0x27c>
 80006ce:	e6f7      	b.n	80004c0 <__aeabi_fmul+0x6c>
 80006d0:	46a1      	mov	r9, r4
 80006d2:	469a      	mov	sl, r3
 80006d4:	e736      	b.n	8000544 <__aeabi_fmul+0xf0>
 80006d6:	2180      	movs	r1, #128	; 0x80
 80006d8:	464b      	mov	r3, r9
 80006da:	03c9      	lsls	r1, r1, #15
 80006dc:	4319      	orrs	r1, r3
 80006de:	0249      	lsls	r1, r1, #9
 80006e0:	4642      	mov	r2, r8
 80006e2:	20ff      	movs	r0, #255	; 0xff
 80006e4:	0a49      	lsrs	r1, r1, #9
 80006e6:	e707      	b.n	80004f8 <__aeabi_fmul+0xa4>
 80006e8:	2303      	movs	r3, #3
 80006ea:	e7df      	b.n	80006ac <__aeabi_fmul+0x258>
 80006ec:	f7ffffff 	.word	0xf7ffffff

080006f0 <__aeabi_fsub>:
 80006f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006f2:	46c6      	mov	lr, r8
 80006f4:	0243      	lsls	r3, r0, #9
 80006f6:	0a5b      	lsrs	r3, r3, #9
 80006f8:	0045      	lsls	r5, r0, #1
 80006fa:	00da      	lsls	r2, r3, #3
 80006fc:	0fc4      	lsrs	r4, r0, #31
 80006fe:	0248      	lsls	r0, r1, #9
 8000700:	004f      	lsls	r7, r1, #1
 8000702:	4694      	mov	ip, r2
 8000704:	0a42      	lsrs	r2, r0, #9
 8000706:	001e      	movs	r6, r3
 8000708:	4690      	mov	r8, r2
 800070a:	b500      	push	{lr}
 800070c:	0e2d      	lsrs	r5, r5, #24
 800070e:	0e3f      	lsrs	r7, r7, #24
 8000710:	0fc9      	lsrs	r1, r1, #31
 8000712:	0980      	lsrs	r0, r0, #6
 8000714:	2fff      	cmp	r7, #255	; 0xff
 8000716:	d059      	beq.n	80007cc <__aeabi_fsub+0xdc>
 8000718:	2201      	movs	r2, #1
 800071a:	4051      	eors	r1, r2
 800071c:	428c      	cmp	r4, r1
 800071e:	d039      	beq.n	8000794 <__aeabi_fsub+0xa4>
 8000720:	1bea      	subs	r2, r5, r7
 8000722:	2a00      	cmp	r2, #0
 8000724:	dd58      	ble.n	80007d8 <__aeabi_fsub+0xe8>
 8000726:	2f00      	cmp	r7, #0
 8000728:	d068      	beq.n	80007fc <__aeabi_fsub+0x10c>
 800072a:	2dff      	cmp	r5, #255	; 0xff
 800072c:	d100      	bne.n	8000730 <__aeabi_fsub+0x40>
 800072e:	e0d1      	b.n	80008d4 <__aeabi_fsub+0x1e4>
 8000730:	2380      	movs	r3, #128	; 0x80
 8000732:	04db      	lsls	r3, r3, #19
 8000734:	4318      	orrs	r0, r3
 8000736:	2a1b      	cmp	r2, #27
 8000738:	dc00      	bgt.n	800073c <__aeabi_fsub+0x4c>
 800073a:	e0e3      	b.n	8000904 <__aeabi_fsub+0x214>
 800073c:	2301      	movs	r3, #1
 800073e:	4662      	mov	r2, ip
 8000740:	1ad3      	subs	r3, r2, r3
 8000742:	015a      	lsls	r2, r3, #5
 8000744:	d400      	bmi.n	8000748 <__aeabi_fsub+0x58>
 8000746:	e0ac      	b.n	80008a2 <__aeabi_fsub+0x1b2>
 8000748:	019b      	lsls	r3, r3, #6
 800074a:	099e      	lsrs	r6, r3, #6
 800074c:	0030      	movs	r0, r6
 800074e:	f000 f9b7 	bl	8000ac0 <__clzsi2>
 8000752:	0033      	movs	r3, r6
 8000754:	3805      	subs	r0, #5
 8000756:	4083      	lsls	r3, r0
 8000758:	4285      	cmp	r5, r0
 800075a:	dc00      	bgt.n	800075e <__aeabi_fsub+0x6e>
 800075c:	e0c6      	b.n	80008ec <__aeabi_fsub+0x1fc>
 800075e:	4ab2      	ldr	r2, [pc, #712]	; (8000a28 <__aeabi_fsub+0x338>)
 8000760:	1a2d      	subs	r5, r5, r0
 8000762:	4013      	ands	r3, r2
 8000764:	075a      	lsls	r2, r3, #29
 8000766:	d004      	beq.n	8000772 <__aeabi_fsub+0x82>
 8000768:	220f      	movs	r2, #15
 800076a:	401a      	ands	r2, r3
 800076c:	2a04      	cmp	r2, #4
 800076e:	d000      	beq.n	8000772 <__aeabi_fsub+0x82>
 8000770:	3304      	adds	r3, #4
 8000772:	015a      	lsls	r2, r3, #5
 8000774:	d400      	bmi.n	8000778 <__aeabi_fsub+0x88>
 8000776:	e097      	b.n	80008a8 <__aeabi_fsub+0x1b8>
 8000778:	1c6a      	adds	r2, r5, #1
 800077a:	2dfe      	cmp	r5, #254	; 0xfe
 800077c:	d100      	bne.n	8000780 <__aeabi_fsub+0x90>
 800077e:	e084      	b.n	800088a <__aeabi_fsub+0x19a>
 8000780:	019b      	lsls	r3, r3, #6
 8000782:	0a5e      	lsrs	r6, r3, #9
 8000784:	b2d2      	uxtb	r2, r2
 8000786:	05d0      	lsls	r0, r2, #23
 8000788:	4330      	orrs	r0, r6
 800078a:	07e4      	lsls	r4, r4, #31
 800078c:	4320      	orrs	r0, r4
 800078e:	bc80      	pop	{r7}
 8000790:	46b8      	mov	r8, r7
 8000792:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000794:	1bea      	subs	r2, r5, r7
 8000796:	2a00      	cmp	r2, #0
 8000798:	dd41      	ble.n	800081e <__aeabi_fsub+0x12e>
 800079a:	2f00      	cmp	r7, #0
 800079c:	d06b      	beq.n	8000876 <__aeabi_fsub+0x186>
 800079e:	2dff      	cmp	r5, #255	; 0xff
 80007a0:	d100      	bne.n	80007a4 <__aeabi_fsub+0xb4>
 80007a2:	e097      	b.n	80008d4 <__aeabi_fsub+0x1e4>
 80007a4:	2380      	movs	r3, #128	; 0x80
 80007a6:	04db      	lsls	r3, r3, #19
 80007a8:	4318      	orrs	r0, r3
 80007aa:	2a1b      	cmp	r2, #27
 80007ac:	dc00      	bgt.n	80007b0 <__aeabi_fsub+0xc0>
 80007ae:	e0cc      	b.n	800094a <__aeabi_fsub+0x25a>
 80007b0:	2301      	movs	r3, #1
 80007b2:	4463      	add	r3, ip
 80007b4:	015a      	lsls	r2, r3, #5
 80007b6:	d574      	bpl.n	80008a2 <__aeabi_fsub+0x1b2>
 80007b8:	3501      	adds	r5, #1
 80007ba:	2dff      	cmp	r5, #255	; 0xff
 80007bc:	d065      	beq.n	800088a <__aeabi_fsub+0x19a>
 80007be:	2201      	movs	r2, #1
 80007c0:	499a      	ldr	r1, [pc, #616]	; (8000a2c <__aeabi_fsub+0x33c>)
 80007c2:	401a      	ands	r2, r3
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	400b      	ands	r3, r1
 80007c8:	4313      	orrs	r3, r2
 80007ca:	e7cb      	b.n	8000764 <__aeabi_fsub+0x74>
 80007cc:	2800      	cmp	r0, #0
 80007ce:	d01f      	beq.n	8000810 <__aeabi_fsub+0x120>
 80007d0:	428c      	cmp	r4, r1
 80007d2:	d022      	beq.n	800081a <__aeabi_fsub+0x12a>
 80007d4:	002a      	movs	r2, r5
 80007d6:	3aff      	subs	r2, #255	; 0xff
 80007d8:	2a00      	cmp	r2, #0
 80007da:	d035      	beq.n	8000848 <__aeabi_fsub+0x158>
 80007dc:	1b7a      	subs	r2, r7, r5
 80007de:	2d00      	cmp	r5, #0
 80007e0:	d000      	beq.n	80007e4 <__aeabi_fsub+0xf4>
 80007e2:	e099      	b.n	8000918 <__aeabi_fsub+0x228>
 80007e4:	4663      	mov	r3, ip
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d100      	bne.n	80007ec <__aeabi_fsub+0xfc>
 80007ea:	e0dd      	b.n	80009a8 <__aeabi_fsub+0x2b8>
 80007ec:	1e53      	subs	r3, r2, #1
 80007ee:	2a01      	cmp	r2, #1
 80007f0:	d100      	bne.n	80007f4 <__aeabi_fsub+0x104>
 80007f2:	e105      	b.n	8000a00 <__aeabi_fsub+0x310>
 80007f4:	2aff      	cmp	r2, #255	; 0xff
 80007f6:	d06b      	beq.n	80008d0 <__aeabi_fsub+0x1e0>
 80007f8:	001a      	movs	r2, r3
 80007fa:	e094      	b.n	8000926 <__aeabi_fsub+0x236>
 80007fc:	2800      	cmp	r0, #0
 80007fe:	d073      	beq.n	80008e8 <__aeabi_fsub+0x1f8>
 8000800:	1e51      	subs	r1, r2, #1
 8000802:	2a01      	cmp	r2, #1
 8000804:	d100      	bne.n	8000808 <__aeabi_fsub+0x118>
 8000806:	e0df      	b.n	80009c8 <__aeabi_fsub+0x2d8>
 8000808:	2aff      	cmp	r2, #255	; 0xff
 800080a:	d063      	beq.n	80008d4 <__aeabi_fsub+0x1e4>
 800080c:	000a      	movs	r2, r1
 800080e:	e792      	b.n	8000736 <__aeabi_fsub+0x46>
 8000810:	2201      	movs	r2, #1
 8000812:	4051      	eors	r1, r2
 8000814:	42a1      	cmp	r1, r4
 8000816:	d000      	beq.n	800081a <__aeabi_fsub+0x12a>
 8000818:	e782      	b.n	8000720 <__aeabi_fsub+0x30>
 800081a:	002a      	movs	r2, r5
 800081c:	3aff      	subs	r2, #255	; 0xff
 800081e:	2a00      	cmp	r2, #0
 8000820:	d036      	beq.n	8000890 <__aeabi_fsub+0x1a0>
 8000822:	1b7a      	subs	r2, r7, r5
 8000824:	2d00      	cmp	r5, #0
 8000826:	d100      	bne.n	800082a <__aeabi_fsub+0x13a>
 8000828:	e0aa      	b.n	8000980 <__aeabi_fsub+0x290>
 800082a:	2fff      	cmp	r7, #255	; 0xff
 800082c:	d100      	bne.n	8000830 <__aeabi_fsub+0x140>
 800082e:	e0da      	b.n	80009e6 <__aeabi_fsub+0x2f6>
 8000830:	2380      	movs	r3, #128	; 0x80
 8000832:	4661      	mov	r1, ip
 8000834:	04db      	lsls	r3, r3, #19
 8000836:	4319      	orrs	r1, r3
 8000838:	468c      	mov	ip, r1
 800083a:	2a1b      	cmp	r2, #27
 800083c:	dc00      	bgt.n	8000840 <__aeabi_fsub+0x150>
 800083e:	e0d4      	b.n	80009ea <__aeabi_fsub+0x2fa>
 8000840:	2301      	movs	r3, #1
 8000842:	003d      	movs	r5, r7
 8000844:	181b      	adds	r3, r3, r0
 8000846:	e7b5      	b.n	80007b4 <__aeabi_fsub+0xc4>
 8000848:	27fe      	movs	r7, #254	; 0xfe
 800084a:	1c6a      	adds	r2, r5, #1
 800084c:	4217      	tst	r7, r2
 800084e:	d171      	bne.n	8000934 <__aeabi_fsub+0x244>
 8000850:	2d00      	cmp	r5, #0
 8000852:	d000      	beq.n	8000856 <__aeabi_fsub+0x166>
 8000854:	e09e      	b.n	8000994 <__aeabi_fsub+0x2a4>
 8000856:	4663      	mov	r3, ip
 8000858:	2b00      	cmp	r3, #0
 800085a:	d100      	bne.n	800085e <__aeabi_fsub+0x16e>
 800085c:	e0d5      	b.n	8000a0a <__aeabi_fsub+0x31a>
 800085e:	2200      	movs	r2, #0
 8000860:	2800      	cmp	r0, #0
 8000862:	d100      	bne.n	8000866 <__aeabi_fsub+0x176>
 8000864:	e78f      	b.n	8000786 <__aeabi_fsub+0x96>
 8000866:	1a1b      	subs	r3, r3, r0
 8000868:	015e      	lsls	r6, r3, #5
 800086a:	d400      	bmi.n	800086e <__aeabi_fsub+0x17e>
 800086c:	e0d6      	b.n	8000a1c <__aeabi_fsub+0x32c>
 800086e:	4663      	mov	r3, ip
 8000870:	000c      	movs	r4, r1
 8000872:	1ac3      	subs	r3, r0, r3
 8000874:	e776      	b.n	8000764 <__aeabi_fsub+0x74>
 8000876:	2800      	cmp	r0, #0
 8000878:	d036      	beq.n	80008e8 <__aeabi_fsub+0x1f8>
 800087a:	1e51      	subs	r1, r2, #1
 800087c:	2a01      	cmp	r2, #1
 800087e:	d100      	bne.n	8000882 <__aeabi_fsub+0x192>
 8000880:	e09a      	b.n	80009b8 <__aeabi_fsub+0x2c8>
 8000882:	2aff      	cmp	r2, #255	; 0xff
 8000884:	d026      	beq.n	80008d4 <__aeabi_fsub+0x1e4>
 8000886:	000a      	movs	r2, r1
 8000888:	e78f      	b.n	80007aa <__aeabi_fsub+0xba>
 800088a:	22ff      	movs	r2, #255	; 0xff
 800088c:	2600      	movs	r6, #0
 800088e:	e77a      	b.n	8000786 <__aeabi_fsub+0x96>
 8000890:	27fe      	movs	r7, #254	; 0xfe
 8000892:	1c6a      	adds	r2, r5, #1
 8000894:	4217      	tst	r7, r2
 8000896:	d062      	beq.n	800095e <__aeabi_fsub+0x26e>
 8000898:	2aff      	cmp	r2, #255	; 0xff
 800089a:	d0f6      	beq.n	800088a <__aeabi_fsub+0x19a>
 800089c:	0015      	movs	r5, r2
 800089e:	4460      	add	r0, ip
 80008a0:	0843      	lsrs	r3, r0, #1
 80008a2:	075a      	lsls	r2, r3, #29
 80008a4:	d000      	beq.n	80008a8 <__aeabi_fsub+0x1b8>
 80008a6:	e75f      	b.n	8000768 <__aeabi_fsub+0x78>
 80008a8:	08db      	lsrs	r3, r3, #3
 80008aa:	2dff      	cmp	r5, #255	; 0xff
 80008ac:	d012      	beq.n	80008d4 <__aeabi_fsub+0x1e4>
 80008ae:	025b      	lsls	r3, r3, #9
 80008b0:	0a5e      	lsrs	r6, r3, #9
 80008b2:	b2ea      	uxtb	r2, r5
 80008b4:	e767      	b.n	8000786 <__aeabi_fsub+0x96>
 80008b6:	4662      	mov	r2, ip
 80008b8:	2a00      	cmp	r2, #0
 80008ba:	d100      	bne.n	80008be <__aeabi_fsub+0x1ce>
 80008bc:	e093      	b.n	80009e6 <__aeabi_fsub+0x2f6>
 80008be:	2800      	cmp	r0, #0
 80008c0:	d008      	beq.n	80008d4 <__aeabi_fsub+0x1e4>
 80008c2:	2280      	movs	r2, #128	; 0x80
 80008c4:	03d2      	lsls	r2, r2, #15
 80008c6:	4213      	tst	r3, r2
 80008c8:	d004      	beq.n	80008d4 <__aeabi_fsub+0x1e4>
 80008ca:	4640      	mov	r0, r8
 80008cc:	4210      	tst	r0, r2
 80008ce:	d101      	bne.n	80008d4 <__aeabi_fsub+0x1e4>
 80008d0:	000c      	movs	r4, r1
 80008d2:	4643      	mov	r3, r8
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d0d8      	beq.n	800088a <__aeabi_fsub+0x19a>
 80008d8:	2680      	movs	r6, #128	; 0x80
 80008da:	03f6      	lsls	r6, r6, #15
 80008dc:	431e      	orrs	r6, r3
 80008de:	0276      	lsls	r6, r6, #9
 80008e0:	22ff      	movs	r2, #255	; 0xff
 80008e2:	0a76      	lsrs	r6, r6, #9
 80008e4:	e74f      	b.n	8000786 <__aeabi_fsub+0x96>
 80008e6:	4643      	mov	r3, r8
 80008e8:	0015      	movs	r5, r2
 80008ea:	e7de      	b.n	80008aa <__aeabi_fsub+0x1ba>
 80008ec:	2220      	movs	r2, #32
 80008ee:	1b40      	subs	r0, r0, r5
 80008f0:	3001      	adds	r0, #1
 80008f2:	1a12      	subs	r2, r2, r0
 80008f4:	0019      	movs	r1, r3
 80008f6:	4093      	lsls	r3, r2
 80008f8:	40c1      	lsrs	r1, r0
 80008fa:	1e5a      	subs	r2, r3, #1
 80008fc:	4193      	sbcs	r3, r2
 80008fe:	2500      	movs	r5, #0
 8000900:	430b      	orrs	r3, r1
 8000902:	e72f      	b.n	8000764 <__aeabi_fsub+0x74>
 8000904:	2320      	movs	r3, #32
 8000906:	1a9b      	subs	r3, r3, r2
 8000908:	0001      	movs	r1, r0
 800090a:	4098      	lsls	r0, r3
 800090c:	0003      	movs	r3, r0
 800090e:	40d1      	lsrs	r1, r2
 8000910:	1e5a      	subs	r2, r3, #1
 8000912:	4193      	sbcs	r3, r2
 8000914:	430b      	orrs	r3, r1
 8000916:	e712      	b.n	800073e <__aeabi_fsub+0x4e>
 8000918:	2fff      	cmp	r7, #255	; 0xff
 800091a:	d0d9      	beq.n	80008d0 <__aeabi_fsub+0x1e0>
 800091c:	2380      	movs	r3, #128	; 0x80
 800091e:	4664      	mov	r4, ip
 8000920:	04db      	lsls	r3, r3, #19
 8000922:	431c      	orrs	r4, r3
 8000924:	46a4      	mov	ip, r4
 8000926:	2a1b      	cmp	r2, #27
 8000928:	dd52      	ble.n	80009d0 <__aeabi_fsub+0x2e0>
 800092a:	2301      	movs	r3, #1
 800092c:	000c      	movs	r4, r1
 800092e:	003d      	movs	r5, r7
 8000930:	1ac3      	subs	r3, r0, r3
 8000932:	e706      	b.n	8000742 <__aeabi_fsub+0x52>
 8000934:	4663      	mov	r3, ip
 8000936:	1a1e      	subs	r6, r3, r0
 8000938:	0173      	lsls	r3, r6, #5
 800093a:	d439      	bmi.n	80009b0 <__aeabi_fsub+0x2c0>
 800093c:	2e00      	cmp	r6, #0
 800093e:	d000      	beq.n	8000942 <__aeabi_fsub+0x252>
 8000940:	e704      	b.n	800074c <__aeabi_fsub+0x5c>
 8000942:	2400      	movs	r4, #0
 8000944:	2200      	movs	r2, #0
 8000946:	2600      	movs	r6, #0
 8000948:	e71d      	b.n	8000786 <__aeabi_fsub+0x96>
 800094a:	2320      	movs	r3, #32
 800094c:	1a9b      	subs	r3, r3, r2
 800094e:	0001      	movs	r1, r0
 8000950:	4098      	lsls	r0, r3
 8000952:	0003      	movs	r3, r0
 8000954:	40d1      	lsrs	r1, r2
 8000956:	1e5a      	subs	r2, r3, #1
 8000958:	4193      	sbcs	r3, r2
 800095a:	430b      	orrs	r3, r1
 800095c:	e729      	b.n	80007b2 <__aeabi_fsub+0xc2>
 800095e:	2d00      	cmp	r5, #0
 8000960:	d1a9      	bne.n	80008b6 <__aeabi_fsub+0x1c6>
 8000962:	4663      	mov	r3, ip
 8000964:	2b00      	cmp	r3, #0
 8000966:	d056      	beq.n	8000a16 <__aeabi_fsub+0x326>
 8000968:	2200      	movs	r2, #0
 800096a:	2800      	cmp	r0, #0
 800096c:	d100      	bne.n	8000970 <__aeabi_fsub+0x280>
 800096e:	e70a      	b.n	8000786 <__aeabi_fsub+0x96>
 8000970:	0003      	movs	r3, r0
 8000972:	4463      	add	r3, ip
 8000974:	015a      	lsls	r2, r3, #5
 8000976:	d594      	bpl.n	80008a2 <__aeabi_fsub+0x1b2>
 8000978:	4a2b      	ldr	r2, [pc, #172]	; (8000a28 <__aeabi_fsub+0x338>)
 800097a:	3501      	adds	r5, #1
 800097c:	4013      	ands	r3, r2
 800097e:	e790      	b.n	80008a2 <__aeabi_fsub+0x1b2>
 8000980:	4663      	mov	r3, ip
 8000982:	2b00      	cmp	r3, #0
 8000984:	d0af      	beq.n	80008e6 <__aeabi_fsub+0x1f6>
 8000986:	1e53      	subs	r3, r2, #1
 8000988:	2a01      	cmp	r2, #1
 800098a:	d015      	beq.n	80009b8 <__aeabi_fsub+0x2c8>
 800098c:	2aff      	cmp	r2, #255	; 0xff
 800098e:	d02a      	beq.n	80009e6 <__aeabi_fsub+0x2f6>
 8000990:	001a      	movs	r2, r3
 8000992:	e752      	b.n	800083a <__aeabi_fsub+0x14a>
 8000994:	4662      	mov	r2, ip
 8000996:	2a00      	cmp	r2, #0
 8000998:	d191      	bne.n	80008be <__aeabi_fsub+0x1ce>
 800099a:	2800      	cmp	r0, #0
 800099c:	d198      	bne.n	80008d0 <__aeabi_fsub+0x1e0>
 800099e:	2680      	movs	r6, #128	; 0x80
 80009a0:	2400      	movs	r4, #0
 80009a2:	22ff      	movs	r2, #255	; 0xff
 80009a4:	03f6      	lsls	r6, r6, #15
 80009a6:	e6ee      	b.n	8000786 <__aeabi_fsub+0x96>
 80009a8:	000c      	movs	r4, r1
 80009aa:	4643      	mov	r3, r8
 80009ac:	0015      	movs	r5, r2
 80009ae:	e77c      	b.n	80008aa <__aeabi_fsub+0x1ba>
 80009b0:	4663      	mov	r3, ip
 80009b2:	000c      	movs	r4, r1
 80009b4:	1ac6      	subs	r6, r0, r3
 80009b6:	e6c9      	b.n	800074c <__aeabi_fsub+0x5c>
 80009b8:	0003      	movs	r3, r0
 80009ba:	4463      	add	r3, ip
 80009bc:	2501      	movs	r5, #1
 80009be:	015a      	lsls	r2, r3, #5
 80009c0:	d400      	bmi.n	80009c4 <__aeabi_fsub+0x2d4>
 80009c2:	e76e      	b.n	80008a2 <__aeabi_fsub+0x1b2>
 80009c4:	2502      	movs	r5, #2
 80009c6:	e6fa      	b.n	80007be <__aeabi_fsub+0xce>
 80009c8:	4663      	mov	r3, ip
 80009ca:	2501      	movs	r5, #1
 80009cc:	1a1b      	subs	r3, r3, r0
 80009ce:	e6b8      	b.n	8000742 <__aeabi_fsub+0x52>
 80009d0:	4664      	mov	r4, ip
 80009d2:	2320      	movs	r3, #32
 80009d4:	40d4      	lsrs	r4, r2
 80009d6:	1a9b      	subs	r3, r3, r2
 80009d8:	4662      	mov	r2, ip
 80009da:	409a      	lsls	r2, r3
 80009dc:	0013      	movs	r3, r2
 80009de:	1e5a      	subs	r2, r3, #1
 80009e0:	4193      	sbcs	r3, r2
 80009e2:	4323      	orrs	r3, r4
 80009e4:	e7a2      	b.n	800092c <__aeabi_fsub+0x23c>
 80009e6:	4643      	mov	r3, r8
 80009e8:	e774      	b.n	80008d4 <__aeabi_fsub+0x1e4>
 80009ea:	4661      	mov	r1, ip
 80009ec:	2320      	movs	r3, #32
 80009ee:	40d1      	lsrs	r1, r2
 80009f0:	1a9b      	subs	r3, r3, r2
 80009f2:	4662      	mov	r2, ip
 80009f4:	409a      	lsls	r2, r3
 80009f6:	0013      	movs	r3, r2
 80009f8:	1e5a      	subs	r2, r3, #1
 80009fa:	4193      	sbcs	r3, r2
 80009fc:	430b      	orrs	r3, r1
 80009fe:	e720      	b.n	8000842 <__aeabi_fsub+0x152>
 8000a00:	4663      	mov	r3, ip
 8000a02:	000c      	movs	r4, r1
 8000a04:	2501      	movs	r5, #1
 8000a06:	1ac3      	subs	r3, r0, r3
 8000a08:	e69b      	b.n	8000742 <__aeabi_fsub+0x52>
 8000a0a:	2800      	cmp	r0, #0
 8000a0c:	d099      	beq.n	8000942 <__aeabi_fsub+0x252>
 8000a0e:	000c      	movs	r4, r1
 8000a10:	4646      	mov	r6, r8
 8000a12:	2200      	movs	r2, #0
 8000a14:	e6b7      	b.n	8000786 <__aeabi_fsub+0x96>
 8000a16:	4646      	mov	r6, r8
 8000a18:	2200      	movs	r2, #0
 8000a1a:	e6b4      	b.n	8000786 <__aeabi_fsub+0x96>
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d000      	beq.n	8000a22 <__aeabi_fsub+0x332>
 8000a20:	e73f      	b.n	80008a2 <__aeabi_fsub+0x1b2>
 8000a22:	2400      	movs	r4, #0
 8000a24:	2600      	movs	r6, #0
 8000a26:	e6ae      	b.n	8000786 <__aeabi_fsub+0x96>
 8000a28:	fbffffff 	.word	0xfbffffff
 8000a2c:	7dffffff 	.word	0x7dffffff

08000a30 <__aeabi_ui2f>:
 8000a30:	b570      	push	{r4, r5, r6, lr}
 8000a32:	1e04      	subs	r4, r0, #0
 8000a34:	d00e      	beq.n	8000a54 <__aeabi_ui2f+0x24>
 8000a36:	f000 f843 	bl	8000ac0 <__clzsi2>
 8000a3a:	239e      	movs	r3, #158	; 0x9e
 8000a3c:	0001      	movs	r1, r0
 8000a3e:	1a1b      	subs	r3, r3, r0
 8000a40:	2b96      	cmp	r3, #150	; 0x96
 8000a42:	dc0c      	bgt.n	8000a5e <__aeabi_ui2f+0x2e>
 8000a44:	2808      	cmp	r0, #8
 8000a46:	d02c      	beq.n	8000aa2 <__aeabi_ui2f+0x72>
 8000a48:	3908      	subs	r1, #8
 8000a4a:	408c      	lsls	r4, r1
 8000a4c:	0264      	lsls	r4, r4, #9
 8000a4e:	0a64      	lsrs	r4, r4, #9
 8000a50:	b2d8      	uxtb	r0, r3
 8000a52:	e001      	b.n	8000a58 <__aeabi_ui2f+0x28>
 8000a54:	2000      	movs	r0, #0
 8000a56:	2400      	movs	r4, #0
 8000a58:	05c0      	lsls	r0, r0, #23
 8000a5a:	4320      	orrs	r0, r4
 8000a5c:	bd70      	pop	{r4, r5, r6, pc}
 8000a5e:	2b99      	cmp	r3, #153	; 0x99
 8000a60:	dd0a      	ble.n	8000a78 <__aeabi_ui2f+0x48>
 8000a62:	0002      	movs	r2, r0
 8000a64:	0020      	movs	r0, r4
 8000a66:	321b      	adds	r2, #27
 8000a68:	4090      	lsls	r0, r2
 8000a6a:	0002      	movs	r2, r0
 8000a6c:	1e50      	subs	r0, r2, #1
 8000a6e:	4182      	sbcs	r2, r0
 8000a70:	2005      	movs	r0, #5
 8000a72:	1a40      	subs	r0, r0, r1
 8000a74:	40c4      	lsrs	r4, r0
 8000a76:	4314      	orrs	r4, r2
 8000a78:	2905      	cmp	r1, #5
 8000a7a:	dc16      	bgt.n	8000aaa <__aeabi_ui2f+0x7a>
 8000a7c:	0022      	movs	r2, r4
 8000a7e:	480f      	ldr	r0, [pc, #60]	; (8000abc <__aeabi_ui2f+0x8c>)
 8000a80:	4002      	ands	r2, r0
 8000a82:	0765      	lsls	r5, r4, #29
 8000a84:	d009      	beq.n	8000a9a <__aeabi_ui2f+0x6a>
 8000a86:	250f      	movs	r5, #15
 8000a88:	402c      	ands	r4, r5
 8000a8a:	2c04      	cmp	r4, #4
 8000a8c:	d005      	beq.n	8000a9a <__aeabi_ui2f+0x6a>
 8000a8e:	3204      	adds	r2, #4
 8000a90:	0154      	lsls	r4, r2, #5
 8000a92:	d502      	bpl.n	8000a9a <__aeabi_ui2f+0x6a>
 8000a94:	239f      	movs	r3, #159	; 0x9f
 8000a96:	4002      	ands	r2, r0
 8000a98:	1a5b      	subs	r3, r3, r1
 8000a9a:	0192      	lsls	r2, r2, #6
 8000a9c:	0a54      	lsrs	r4, r2, #9
 8000a9e:	b2d8      	uxtb	r0, r3
 8000aa0:	e7da      	b.n	8000a58 <__aeabi_ui2f+0x28>
 8000aa2:	0264      	lsls	r4, r4, #9
 8000aa4:	2096      	movs	r0, #150	; 0x96
 8000aa6:	0a64      	lsrs	r4, r4, #9
 8000aa8:	e7d6      	b.n	8000a58 <__aeabi_ui2f+0x28>
 8000aaa:	1f4a      	subs	r2, r1, #5
 8000aac:	4094      	lsls	r4, r2
 8000aae:	0022      	movs	r2, r4
 8000ab0:	4802      	ldr	r0, [pc, #8]	; (8000abc <__aeabi_ui2f+0x8c>)
 8000ab2:	4002      	ands	r2, r0
 8000ab4:	0765      	lsls	r5, r4, #29
 8000ab6:	d0f0      	beq.n	8000a9a <__aeabi_ui2f+0x6a>
 8000ab8:	e7e5      	b.n	8000a86 <__aeabi_ui2f+0x56>
 8000aba:	46c0      	nop			; (mov r8, r8)
 8000abc:	fbffffff 	.word	0xfbffffff

08000ac0 <__clzsi2>:
 8000ac0:	211c      	movs	r1, #28
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	041b      	lsls	r3, r3, #16
 8000ac6:	4298      	cmp	r0, r3
 8000ac8:	d301      	bcc.n	8000ace <__clzsi2+0xe>
 8000aca:	0c00      	lsrs	r0, r0, #16
 8000acc:	3910      	subs	r1, #16
 8000ace:	0a1b      	lsrs	r3, r3, #8
 8000ad0:	4298      	cmp	r0, r3
 8000ad2:	d301      	bcc.n	8000ad8 <__clzsi2+0x18>
 8000ad4:	0a00      	lsrs	r0, r0, #8
 8000ad6:	3908      	subs	r1, #8
 8000ad8:	091b      	lsrs	r3, r3, #4
 8000ada:	4298      	cmp	r0, r3
 8000adc:	d301      	bcc.n	8000ae2 <__clzsi2+0x22>
 8000ade:	0900      	lsrs	r0, r0, #4
 8000ae0:	3904      	subs	r1, #4
 8000ae2:	a202      	add	r2, pc, #8	; (adr r2, 8000aec <__clzsi2+0x2c>)
 8000ae4:	5c10      	ldrb	r0, [r2, r0]
 8000ae6:	1840      	adds	r0, r0, r1
 8000ae8:	4770      	bx	lr
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	02020304 	.word	0x02020304
 8000af0:	01010101 	.word	0x01010101
	...

08000afc <ahtx0_begin>:
 *         and waits until the calibration process is complete.
 *
 * @param  hi2c: Pointer to the I2C handle to be used for communication (I2C_HandleTypeDef)
 */
void ahtx0_begin(I2C_HandleTypeDef* hi2c)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af02      	add	r7, sp, #8
 8000b02:	6078      	str	r0, [r7, #4]
	AHTX0_InitStruct.channel = hi2c;
 8000b04:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <ahtx0_begin+0x4c>)
 8000b06:	687a      	ldr	r2, [r7, #4]
 8000b08:	601a      	str	r2, [r3, #0]
	ahtx0_soft_reset();
 8000b0a:	f000 f86b 	bl	8000be4 <ahtx0_soft_reset>
	HAL_Delay(100);
 8000b0e:	2064      	movs	r0, #100	; 0x64
 8000b10:	f000 fb0a 	bl	8001128 <HAL_Delay>

#ifdef	AHTX0_CALIBRATION_ENABLED
	uint8_t calibrate_buf[3] = {AHTX0_CMD_TRIGGER, STATUS_CAL_ENABLE, 0x00};
 8000b14:	200c      	movs	r0, #12
 8000b16:	183b      	adds	r3, r7, r0
 8000b18:	4a0c      	ldr	r2, [pc, #48]	; (8000b4c <ahtx0_begin+0x50>)
 8000b1a:	8811      	ldrh	r1, [r2, #0]
 8000b1c:	8019      	strh	r1, [r3, #0]
 8000b1e:	7892      	ldrb	r2, [r2, #2]
 8000b20:	709a      	strb	r2, [r3, #2]
	HAL_I2C_Master_Transmit(hi2c, AHTX0_ADRESS, calibrate_buf, 3, 100);
 8000b22:	183a      	adds	r2, r7, r0
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	2364      	movs	r3, #100	; 0x64
 8000b28:	9300      	str	r3, [sp, #0]
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	2170      	movs	r1, #112	; 0x70
 8000b2e:	f000 fdef 	bl	8001710 <HAL_I2C_Master_Transmit>
	while(!ahtx0_get_cal_state());
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	f000 f830 	bl	8000b98 <ahtx0_get_cal_state>
 8000b38:	1e03      	subs	r3, r0, #0
 8000b3a:	d0fb      	beq.n	8000b34 <ahtx0_begin+0x38>
#endif

}
 8000b3c:	46c0      	nop			; (mov r8, r8)
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	46bd      	mov	sp, r7
 8000b42:	b004      	add	sp, #16
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	46c0      	nop			; (mov r8, r8)
 8000b48:	20000028 	.word	0x20000028
 8000b4c:	08002fb0 	.word	0x08002fb0

08000b50 <ahtx0_get_status>:
 *         - STATUS_ERROR if an error is detected.
 *         - STATUS_FREE if the sensor is ready for communication.
 *         - STATUS_BUSY if the sensor is currently busy.
 */
AHTX0_SensorState ahtx0_get_status(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af02      	add	r7, sp, #8
	uint8_t ret = 0x00;
 8000b56:	1dfb      	adds	r3, r7, #7
 8000b58:	2200      	movs	r2, #0
 8000b5a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Receive(AHTX0_InitStruct.channel, AHTX0_ADRESS, &ret, 1, 100);
 8000b5c:	4b0d      	ldr	r3, [pc, #52]	; (8000b94 <ahtx0_get_status+0x44>)
 8000b5e:	6818      	ldr	r0, [r3, #0]
 8000b60:	1dfa      	adds	r2, r7, #7
 8000b62:	2364      	movs	r3, #100	; 0x64
 8000b64:	9300      	str	r3, [sp, #0]
 8000b66:	2301      	movs	r3, #1
 8000b68:	2170      	movs	r1, #112	; 0x70
 8000b6a:	f000 fefb 	bl	8001964 <HAL_I2C_Master_Receive>

	if(ret == STATUS_ERROR)
 8000b6e:	1dfb      	adds	r3, r7, #7
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	2bff      	cmp	r3, #255	; 0xff
 8000b74:	d102      	bne.n	8000b7c <ahtx0_get_status+0x2c>
	{
		return ret;
 8000b76:	1dfb      	adds	r3, r7, #7
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	e007      	b.n	8000b8c <ahtx0_get_status+0x3c>
	}
	else if(!(ret & STATUS_BUSY))
 8000b7c:	1dfb      	adds	r3, r7, #7
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	b25b      	sxtb	r3, r3
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	db01      	blt.n	8000b8a <ahtx0_get_status+0x3a>
	{
		return STATUS_FREE;
 8000b86:	2300      	movs	r3, #0
 8000b88:	e000      	b.n	8000b8c <ahtx0_get_status+0x3c>
	}

	return STATUS_BUSY;
 8000b8a:	2380      	movs	r3, #128	; 0x80
}
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	b002      	add	sp, #8
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20000028 	.word	0x20000028

08000b98 <ahtx0_get_cal_state>:
 *         - STATUS_CAL_ERROR if an error is detected.
 *         - STATUS_CAL_DISABLE if the sensor is not calibrated.
 *         - STATUS_CAL_ENABLE if the sensor is successfully calibrated.
 */
AHTX0_CalState ahtx0_get_cal_state(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af02      	add	r7, sp, #8
	uint8_t ret = 0x00;
 8000b9e:	1dfb      	adds	r3, r7, #7
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Receive(AHTX0_InitStruct.channel, AHTX0_ADRESS, &ret, 1, 100);
 8000ba4:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <ahtx0_get_cal_state+0x48>)
 8000ba6:	6818      	ldr	r0, [r3, #0]
 8000ba8:	1dfa      	adds	r2, r7, #7
 8000baa:	2364      	movs	r3, #100	; 0x64
 8000bac:	9300      	str	r3, [sp, #0]
 8000bae:	2301      	movs	r3, #1
 8000bb0:	2170      	movs	r1, #112	; 0x70
 8000bb2:	f000 fed7 	bl	8001964 <HAL_I2C_Master_Receive>

	if(ret == STATUS_CAL_ERROR)
 8000bb6:	1dfb      	adds	r3, r7, #7
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	2bff      	cmp	r3, #255	; 0xff
 8000bbc:	d102      	bne.n	8000bc4 <ahtx0_get_cal_state+0x2c>
	{
		return ret;
 8000bbe:	1dfb      	adds	r3, r7, #7
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	e008      	b.n	8000bd6 <ahtx0_get_cal_state+0x3e>
	}
	else if(!(ret & STATUS_CAL_ENABLE))
 8000bc4:	1dfb      	adds	r3, r7, #7
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	001a      	movs	r2, r3
 8000bca:	2308      	movs	r3, #8
 8000bcc:	4013      	ands	r3, r2
 8000bce:	d101      	bne.n	8000bd4 <ahtx0_get_cal_state+0x3c>
	{
		return STATUS_CAL_DISABLE;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	e000      	b.n	8000bd6 <ahtx0_get_cal_state+0x3e>
	}

	return STATUS_CAL_ENABLE;
 8000bd4:	2308      	movs	r3, #8
}
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	b002      	add	sp, #8
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	46c0      	nop			; (mov r8, r8)
 8000be0:	20000028 	.word	0x20000028

08000be4 <ahtx0_soft_reset>:
 *		system begins to reinitialize and restores the default
 *		settings.
 *
 */
void ahtx0_soft_reset(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af02      	add	r7, sp, #8
	uint8_t temp = AHTX0_CMD_RESET;
 8000bea:	1dfb      	adds	r3, r7, #7
 8000bec:	22ba      	movs	r2, #186	; 0xba
 8000bee:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(AHTX0_InitStruct.channel, AHTX0_ADRESS, &temp, 1, 100);
 8000bf0:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <ahtx0_soft_reset+0x28>)
 8000bf2:	6818      	ldr	r0, [r3, #0]
 8000bf4:	1dfa      	adds	r2, r7, #7
 8000bf6:	2364      	movs	r3, #100	; 0x64
 8000bf8:	9300      	str	r3, [sp, #0]
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	2170      	movs	r1, #112	; 0x70
 8000bfe:	f000 fd87 	bl	8001710 <HAL_I2C_Master_Transmit>
}
 8000c02:	46c0      	nop			; (mov r8, r8)
 8000c04:	46bd      	mov	sp, r7
 8000c06:	b002      	add	sp, #8
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	46c0      	nop			; (mov r8, r8)
 8000c0c:	20000028 	.word	0x20000028

08000c10 <ahtx0_read_sensor>:
 *
 *         Temperature is calculated using bits [19:0] starting from byte 3 (low nibble), 4, and 5.
 *         Humidity is calculated using bits [19:0] starting from byte 1, 2, and high nibble of byte 3.
 */
void ahtx0_read_sensor(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af02      	add	r7, sp, #8
	uint8_t trigger_buf[3] = {AHTX0_CMD_TRIGGER, 0x33, 0x00};
 8000c16:	003b      	movs	r3, r7
 8000c18:	4a31      	ldr	r2, [pc, #196]	; (8000ce0 <ahtx0_read_sensor+0xd0>)
 8000c1a:	8811      	ldrh	r1, [r2, #0]
 8000c1c:	8019      	strh	r1, [r3, #0]
 8000c1e:	7892      	ldrb	r2, [r2, #2]
 8000c20:	709a      	strb	r2, [r3, #2]
	HAL_I2C_Master_Transmit(AHTX0_InitStruct.channel, AHTX0_ADRESS, trigger_buf, 3, 100);
 8000c22:	4b30      	ldr	r3, [pc, #192]	; (8000ce4 <ahtx0_read_sensor+0xd4>)
 8000c24:	6818      	ldr	r0, [r3, #0]
 8000c26:	003a      	movs	r2, r7
 8000c28:	2364      	movs	r3, #100	; 0x64
 8000c2a:	9300      	str	r3, [sp, #0]
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	2170      	movs	r1, #112	; 0x70
 8000c30:	f000 fd6e 	bl	8001710 <HAL_I2C_Master_Transmit>

	while(ahtx0_get_status());
 8000c34:	46c0      	nop			; (mov r8, r8)
 8000c36:	f7ff ff8b 	bl	8000b50 <ahtx0_get_status>
 8000c3a:	1e03      	subs	r3, r0, #0
 8000c3c:	d1fb      	bne.n	8000c36 <ahtx0_read_sensor+0x26>

	HAL_I2C_Master_Receive(AHTX0_InitStruct.channel, AHTX0_ADRESS, AHTX0_DataStruct.buf, 6, 100);
 8000c3e:	4b29      	ldr	r3, [pc, #164]	; (8000ce4 <ahtx0_read_sensor+0xd4>)
 8000c40:	6818      	ldr	r0, [r3, #0]
 8000c42:	4a29      	ldr	r2, [pc, #164]	; (8000ce8 <ahtx0_read_sensor+0xd8>)
 8000c44:	2364      	movs	r3, #100	; 0x64
 8000c46:	9300      	str	r3, [sp, #0]
 8000c48:	2306      	movs	r3, #6
 8000c4a:	2170      	movs	r1, #112	; 0x70
 8000c4c:	f000 fe8a 	bl	8001964 <HAL_I2C_Master_Receive>

	uint32_t temp = (((uint32_t)AHTX0_DataStruct.buf[3] & 15) << 16) | ((uint32_t)AHTX0_DataStruct.buf[4] << 8) | AHTX0_DataStruct.buf[5];
 8000c50:	4b25      	ldr	r3, [pc, #148]	; (8000ce8 <ahtx0_read_sensor+0xd8>)
 8000c52:	78db      	ldrb	r3, [r3, #3]
 8000c54:	041a      	lsls	r2, r3, #16
 8000c56:	23f0      	movs	r3, #240	; 0xf0
 8000c58:	031b      	lsls	r3, r3, #12
 8000c5a:	401a      	ands	r2, r3
 8000c5c:	4b22      	ldr	r3, [pc, #136]	; (8000ce8 <ahtx0_read_sensor+0xd8>)
 8000c5e:	791b      	ldrb	r3, [r3, #4]
 8000c60:	021b      	lsls	r3, r3, #8
 8000c62:	4313      	orrs	r3, r2
 8000c64:	4a20      	ldr	r2, [pc, #128]	; (8000ce8 <ahtx0_read_sensor+0xd8>)
 8000c66:	7952      	ldrb	r2, [r2, #5]
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	607b      	str	r3, [r7, #4]
	AHTX0_DataStruct.temp = (float)(temp * 200.0f / 1048576.0f) - 50.0f;
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	f7ff fedf 	bl	8000a30 <__aeabi_ui2f>
 8000c72:	1c03      	adds	r3, r0, #0
 8000c74:	491d      	ldr	r1, [pc, #116]	; (8000cec <ahtx0_read_sensor+0xdc>)
 8000c76:	1c18      	adds	r0, r3, #0
 8000c78:	f7ff fbec 	bl	8000454 <__aeabi_fmul>
 8000c7c:	1c03      	adds	r3, r0, #0
 8000c7e:	2193      	movs	r1, #147	; 0x93
 8000c80:	05c9      	lsls	r1, r1, #23
 8000c82:	1c18      	adds	r0, r3, #0
 8000c84:	f7ff facc 	bl	8000220 <__aeabi_fdiv>
 8000c88:	1c03      	adds	r3, r0, #0
 8000c8a:	4919      	ldr	r1, [pc, #100]	; (8000cf0 <ahtx0_read_sensor+0xe0>)
 8000c8c:	1c18      	adds	r0, r3, #0
 8000c8e:	f7ff fd2f 	bl	80006f0 <__aeabi_fsub>
 8000c92:	1c03      	adds	r3, r0, #0
 8000c94:	1c1a      	adds	r2, r3, #0
 8000c96:	4b14      	ldr	r3, [pc, #80]	; (8000ce8 <ahtx0_read_sensor+0xd8>)
 8000c98:	609a      	str	r2, [r3, #8]

	temp = ((uint32_t)AHTX0_DataStruct.buf[1] << 12) | ((uint32_t)AHTX0_DataStruct.buf[2] << 4) | (AHTX0_DataStruct.buf[3] >> 4);
 8000c9a:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <ahtx0_read_sensor+0xd8>)
 8000c9c:	785b      	ldrb	r3, [r3, #1]
 8000c9e:	031a      	lsls	r2, r3, #12
 8000ca0:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <ahtx0_read_sensor+0xd8>)
 8000ca2:	789b      	ldrb	r3, [r3, #2]
 8000ca4:	011b      	lsls	r3, r3, #4
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	4a0f      	ldr	r2, [pc, #60]	; (8000ce8 <ahtx0_read_sensor+0xd8>)
 8000caa:	78d2      	ldrb	r2, [r2, #3]
 8000cac:	0912      	lsrs	r2, r2, #4
 8000cae:	b2d2      	uxtb	r2, r2
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	607b      	str	r3, [r7, #4]
	AHTX0_DataStruct.hum = (float)(temp*100.0f/1048576.0f);
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	f7ff febb 	bl	8000a30 <__aeabi_ui2f>
 8000cba:	1c03      	adds	r3, r0, #0
 8000cbc:	490d      	ldr	r1, [pc, #52]	; (8000cf4 <ahtx0_read_sensor+0xe4>)
 8000cbe:	1c18      	adds	r0, r3, #0
 8000cc0:	f7ff fbc8 	bl	8000454 <__aeabi_fmul>
 8000cc4:	1c03      	adds	r3, r0, #0
 8000cc6:	2193      	movs	r1, #147	; 0x93
 8000cc8:	05c9      	lsls	r1, r1, #23
 8000cca:	1c18      	adds	r0, r3, #0
 8000ccc:	f7ff faa8 	bl	8000220 <__aeabi_fdiv>
 8000cd0:	1c03      	adds	r3, r0, #0
 8000cd2:	1c1a      	adds	r2, r3, #0
 8000cd4:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <ahtx0_read_sensor+0xd8>)
 8000cd6:	60da      	str	r2, [r3, #12]

}
 8000cd8:	46c0      	nop			; (mov r8, r8)
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	b002      	add	sp, #8
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	08002fb4 	.word	0x08002fb4
 8000ce4:	20000028 	.word	0x20000028
 8000ce8:	2000002c 	.word	0x2000002c
 8000cec:	43480000 	.word	0x43480000
 8000cf0:	42480000 	.word	0x42480000
 8000cf4:	42c80000 	.word	0x42c80000

08000cf8 <ahtx0_get_temperature>:
 * @brief  Returns the last measured temperature value.
 *
 * @retval float: Temperature in degrees Celsius.
 */
float ahtx0_get_temperature(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
	return AHTX0_DataStruct.temp;
 8000cfc:	4b02      	ldr	r3, [pc, #8]	; (8000d08 <ahtx0_get_temperature+0x10>)
 8000cfe:	689b      	ldr	r3, [r3, #8]
}
 8000d00:	1c18      	adds	r0, r3, #0
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	2000002c 	.word	0x2000002c

08000d0c <ahtx0_get_humidity>:
 * @brief  Returns the last measured humidity value.
 *
 * @retval float: Relative humidity in percentage (%RH).
 */
float ahtx0_get_humidity(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
	return AHTX0_DataStruct.hum;
 8000d10:	4b02      	ldr	r3, [pc, #8]	; (8000d1c <ahtx0_get_humidity+0x10>)
 8000d12:	68db      	ldr	r3, [r3, #12]
}
 8000d14:	1c18      	adds	r0, r3, #0
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	2000002c 	.word	0x2000002c

08000d20 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d26:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <MX_GPIO_Init+0x40>)
 8000d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d2a:	4b0d      	ldr	r3, [pc, #52]	; (8000d60 <MX_GPIO_Init+0x40>)
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	430a      	orrs	r2, r1
 8000d30:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d32:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <MX_GPIO_Init+0x40>)
 8000d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d36:	2201      	movs	r2, #1
 8000d38:	4013      	ands	r3, r2
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3e:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <MX_GPIO_Init+0x40>)
 8000d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d42:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <MX_GPIO_Init+0x40>)
 8000d44:	2102      	movs	r1, #2
 8000d46:	430a      	orrs	r2, r1
 8000d48:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d4a:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <MX_GPIO_Init+0x40>)
 8000d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d4e:	2202      	movs	r2, #2
 8000d50:	4013      	ands	r3, r2
 8000d52:	603b      	str	r3, [r7, #0]
 8000d54:	683b      	ldr	r3, [r7, #0]

}
 8000d56:	46c0      	nop			; (mov r8, r8)
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	b002      	add	sp, #8
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	46c0      	nop			; (mov r8, r8)
 8000d60:	40021000 	.word	0x40021000

08000d64 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d68:	4b1c      	ldr	r3, [pc, #112]	; (8000ddc <MX_I2C1_Init+0x78>)
 8000d6a:	4a1d      	ldr	r2, [pc, #116]	; (8000de0 <MX_I2C1_Init+0x7c>)
 8000d6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 8000d6e:	4b1b      	ldr	r3, [pc, #108]	; (8000ddc <MX_I2C1_Init+0x78>)
 8000d70:	22e1      	movs	r2, #225	; 0xe1
 8000d72:	00d2      	lsls	r2, r2, #3
 8000d74:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d76:	4b19      	ldr	r3, [pc, #100]	; (8000ddc <MX_I2C1_Init+0x78>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d7c:	4b17      	ldr	r3, [pc, #92]	; (8000ddc <MX_I2C1_Init+0x78>)
 8000d7e:	2201      	movs	r2, #1
 8000d80:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d82:	4b16      	ldr	r3, [pc, #88]	; (8000ddc <MX_I2C1_Init+0x78>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d88:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <MX_I2C1_Init+0x78>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d8e:	4b13      	ldr	r3, [pc, #76]	; (8000ddc <MX_I2C1_Init+0x78>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d94:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <MX_I2C1_Init+0x78>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d9a:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <MX_I2C1_Init+0x78>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000da0:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <MX_I2C1_Init+0x78>)
 8000da2:	0018      	movs	r0, r3
 8000da4:	f000 fc0e 	bl	80015c4 <HAL_I2C_Init>
 8000da8:	1e03      	subs	r3, r0, #0
 8000daa:	d001      	beq.n	8000db0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000dac:	f000 f8ec 	bl	8000f88 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000db0:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <MX_I2C1_Init+0x78>)
 8000db2:	2100      	movs	r1, #0
 8000db4:	0018      	movs	r0, r3
 8000db6:	f001 f9b9 	bl	800212c <HAL_I2CEx_ConfigAnalogFilter>
 8000dba:	1e03      	subs	r3, r0, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000dbe:	f000 f8e3 	bl	8000f88 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000dc2:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <MX_I2C1_Init+0x78>)
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	0018      	movs	r0, r3
 8000dc8:	f001 f9fc 	bl	80021c4 <HAL_I2CEx_ConfigDigitalFilter>
 8000dcc:	1e03      	subs	r3, r0, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000dd0:	f000 f8da 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dd4:	46c0      	nop			; (mov r8, r8)
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	2000003c 	.word	0x2000003c
 8000de0:	40005400 	.word	0x40005400

08000de4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000de4:	b590      	push	{r4, r7, lr}
 8000de6:	b089      	sub	sp, #36	; 0x24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	240c      	movs	r4, #12
 8000dee:	193b      	adds	r3, r7, r4
 8000df0:	0018      	movs	r0, r3
 8000df2:	2314      	movs	r3, #20
 8000df4:	001a      	movs	r2, r3
 8000df6:	2100      	movs	r1, #0
 8000df8:	f002 f8a2 	bl	8002f40 <memset>
  if(i2cHandle->Instance==I2C1)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a17      	ldr	r2, [pc, #92]	; (8000e60 <HAL_I2C_MspInit+0x7c>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d128      	bne.n	8000e58 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e06:	4b17      	ldr	r3, [pc, #92]	; (8000e64 <HAL_I2C_MspInit+0x80>)
 8000e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e0a:	4b16      	ldr	r3, [pc, #88]	; (8000e64 <HAL_I2C_MspInit+0x80>)
 8000e0c:	2102      	movs	r1, #2
 8000e0e:	430a      	orrs	r2, r1
 8000e10:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e12:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <HAL_I2C_MspInit+0x80>)
 8000e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e16:	2202      	movs	r2, #2
 8000e18:	4013      	ands	r3, r2
 8000e1a:	60bb      	str	r3, [r7, #8]
 8000e1c:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e1e:	0021      	movs	r1, r4
 8000e20:	187b      	adds	r3, r7, r1
 8000e22:	22c0      	movs	r2, #192	; 0xc0
 8000e24:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e26:	187b      	adds	r3, r7, r1
 8000e28:	2212      	movs	r2, #18
 8000e2a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	187b      	adds	r3, r7, r1
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e32:	187b      	adds	r3, r7, r1
 8000e34:	2203      	movs	r2, #3
 8000e36:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000e38:	187b      	adds	r3, r7, r1
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3e:	187b      	adds	r3, r7, r1
 8000e40:	4a09      	ldr	r2, [pc, #36]	; (8000e68 <HAL_I2C_MspInit+0x84>)
 8000e42:	0019      	movs	r1, r3
 8000e44:	0010      	movs	r0, r2
 8000e46:	f000 fa47 	bl	80012d8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e4a:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <HAL_I2C_MspInit+0x80>)
 8000e4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e4e:	4b05      	ldr	r3, [pc, #20]	; (8000e64 <HAL_I2C_MspInit+0x80>)
 8000e50:	2180      	movs	r1, #128	; 0x80
 8000e52:	0389      	lsls	r1, r1, #14
 8000e54:	430a      	orrs	r2, r1
 8000e56:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000e58:	46c0      	nop			; (mov r8, r8)
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	b009      	add	sp, #36	; 0x24
 8000e5e:	bd90      	pop	{r4, r7, pc}
 8000e60:	40005400 	.word	0x40005400
 8000e64:	40021000 	.word	0x40021000
 8000e68:	50000400 	.word	0x50000400

08000e6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e70:	f000 f8ea 	bl	8001048 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e74:	f000 f81c 	bl	8000eb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e78:	f7ff ff52 	bl	8000d20 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000e7c:	f7ff ff72 	bl	8000d64 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ahtx0_begin(&hi2c1);
 8000e80:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <main+0x38>)
 8000e82:	0018      	movs	r0, r3
 8000e84:	f7ff fe3a 	bl	8000afc <ahtx0_begin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ahtx0_read_sensor();
 8000e88:	f7ff fec2 	bl	8000c10 <ahtx0_read_sensor>
	  temp = ahtx0_get_temperature();
 8000e8c:	f7ff ff34 	bl	8000cf8 <ahtx0_get_temperature>
 8000e90:	1c02      	adds	r2, r0, #0
 8000e92:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <main+0x3c>)
 8000e94:	601a      	str	r2, [r3, #0]
	  hum = ahtx0_get_humidity();
 8000e96:	f7ff ff39 	bl	8000d0c <ahtx0_get_humidity>
 8000e9a:	1c02      	adds	r2, r0, #0
 8000e9c:	4b03      	ldr	r3, [pc, #12]	; (8000eac <main+0x40>)
 8000e9e:	601a      	str	r2, [r3, #0]
	  ahtx0_read_sensor();
 8000ea0:	e7f2      	b.n	8000e88 <main+0x1c>
 8000ea2:	46c0      	nop			; (mov r8, r8)
 8000ea4:	2000003c 	.word	0x2000003c
 8000ea8:	20000090 	.word	0x20000090
 8000eac:	20000094 	.word	0x20000094

08000eb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eb0:	b590      	push	{r4, r7, lr}
 8000eb2:	b09b      	sub	sp, #108	; 0x6c
 8000eb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eb6:	2434      	movs	r4, #52	; 0x34
 8000eb8:	193b      	adds	r3, r7, r4
 8000eba:	0018      	movs	r0, r3
 8000ebc:	2334      	movs	r3, #52	; 0x34
 8000ebe:	001a      	movs	r2, r3
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	f002 f83d 	bl	8002f40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ec6:	2320      	movs	r3, #32
 8000ec8:	18fb      	adds	r3, r7, r3
 8000eca:	0018      	movs	r0, r3
 8000ecc:	2314      	movs	r3, #20
 8000ece:	001a      	movs	r2, r3
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	f002 f835 	bl	8002f40 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ed6:	1d3b      	adds	r3, r7, #4
 8000ed8:	0018      	movs	r0, r3
 8000eda:	231c      	movs	r3, #28
 8000edc:	001a      	movs	r2, r3
 8000ede:	2100      	movs	r1, #0
 8000ee0:	f002 f82e 	bl	8002f40 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ee4:	4b26      	ldr	r3, [pc, #152]	; (8000f80 <SystemClock_Config+0xd0>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a26      	ldr	r2, [pc, #152]	; (8000f84 <SystemClock_Config+0xd4>)
 8000eea:	401a      	ands	r2, r3
 8000eec:	4b24      	ldr	r3, [pc, #144]	; (8000f80 <SystemClock_Config+0xd0>)
 8000eee:	2180      	movs	r1, #128	; 0x80
 8000ef0:	0109      	lsls	r1, r1, #4
 8000ef2:	430a      	orrs	r2, r1
 8000ef4:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000ef6:	0021      	movs	r1, r4
 8000ef8:	187b      	adds	r3, r7, r1
 8000efa:	2210      	movs	r2, #16
 8000efc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000efe:	187b      	adds	r3, r7, r1
 8000f00:	2201      	movs	r2, #1
 8000f02:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f04:	187b      	adds	r3, r7, r1
 8000f06:	2200      	movs	r2, #0
 8000f08:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000f0a:	187b      	adds	r3, r7, r1
 8000f0c:	22a0      	movs	r2, #160	; 0xa0
 8000f0e:	0212      	lsls	r2, r2, #8
 8000f10:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f12:	187b      	adds	r3, r7, r1
 8000f14:	2200      	movs	r2, #0
 8000f16:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f18:	187b      	adds	r3, r7, r1
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	f001 f99e 	bl	800225c <HAL_RCC_OscConfig>
 8000f20:	1e03      	subs	r3, r0, #0
 8000f22:	d001      	beq.n	8000f28 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000f24:	f000 f830 	bl	8000f88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f28:	2120      	movs	r1, #32
 8000f2a:	187b      	adds	r3, r7, r1
 8000f2c:	220f      	movs	r2, #15
 8000f2e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000f30:	187b      	adds	r3, r7, r1
 8000f32:	2200      	movs	r2, #0
 8000f34:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f36:	187b      	adds	r3, r7, r1
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f3c:	187b      	adds	r3, r7, r1
 8000f3e:	2200      	movs	r2, #0
 8000f40:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f42:	187b      	adds	r3, r7, r1
 8000f44:	2200      	movs	r2, #0
 8000f46:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f48:	187b      	adds	r3, r7, r1
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	f001 fcef 	bl	8002930 <HAL_RCC_ClockConfig>
 8000f52:	1e03      	subs	r3, r0, #0
 8000f54:	d001      	beq.n	8000f5a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000f56:	f000 f817 	bl	8000f88 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	2208      	movs	r2, #8
 8000f5e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f60:	1d3b      	adds	r3, r7, #4
 8000f62:	2200      	movs	r2, #0
 8000f64:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f66:	1d3b      	adds	r3, r7, #4
 8000f68:	0018      	movs	r0, r3
 8000f6a:	f001 feaf 	bl	8002ccc <HAL_RCCEx_PeriphCLKConfig>
 8000f6e:	1e03      	subs	r3, r0, #0
 8000f70:	d001      	beq.n	8000f76 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000f72:	f000 f809 	bl	8000f88 <Error_Handler>
  }
}
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	b01b      	add	sp, #108	; 0x6c
 8000f7c:	bd90      	pop	{r4, r7, pc}
 8000f7e:	46c0      	nop			; (mov r8, r8)
 8000f80:	40007000 	.word	0x40007000
 8000f84:	ffffe7ff 	.word	0xffffe7ff

08000f88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f8c:	b672      	cpsid	i
}
 8000f8e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <Error_Handler+0x8>
	...

08000f94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f98:	4b07      	ldr	r3, [pc, #28]	; (8000fb8 <HAL_MspInit+0x24>)
 8000f9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <HAL_MspInit+0x24>)
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa4:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <HAL_MspInit+0x24>)
 8000fa6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000fa8:	4b03      	ldr	r3, [pc, #12]	; (8000fb8 <HAL_MspInit+0x24>)
 8000faa:	2180      	movs	r1, #128	; 0x80
 8000fac:	0549      	lsls	r1, r1, #21
 8000fae:	430a      	orrs	r2, r1
 8000fb0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fb2:	46c0      	nop			; (mov r8, r8)
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40021000 	.word	0x40021000

08000fbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <NMI_Handler+0x4>

08000fc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc6:	e7fe      	b.n	8000fc6 <HardFault_Handler+0x4>

08000fc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000fcc:	46c0      	nop			; (mov r8, r8)
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fd6:	46c0      	nop			; (mov r8, r8)
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe0:	f000 f886 	bl	80010f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe4:	46c0      	nop			; (mov r8, r8)
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fee:	46c0      	nop			; (mov r8, r8)
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000ff4:	480d      	ldr	r0, [pc, #52]	; (800102c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000ff6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ff8:	f7ff fff7 	bl	8000fea <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ffc:	480c      	ldr	r0, [pc, #48]	; (8001030 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ffe:	490d      	ldr	r1, [pc, #52]	; (8001034 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001000:	4a0d      	ldr	r2, [pc, #52]	; (8001038 <LoopForever+0xe>)
  movs r3, #0
 8001002:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001004:	e002      	b.n	800100c <LoopCopyDataInit>

08001006 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001006:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001008:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800100a:	3304      	adds	r3, #4

0800100c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800100c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800100e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001010:	d3f9      	bcc.n	8001006 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001012:	4a0a      	ldr	r2, [pc, #40]	; (800103c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001014:	4c0a      	ldr	r4, [pc, #40]	; (8001040 <LoopForever+0x16>)
  movs r3, #0
 8001016:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001018:	e001      	b.n	800101e <LoopFillZerobss>

0800101a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800101a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800101c:	3204      	adds	r2, #4

0800101e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800101e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001020:	d3fb      	bcc.n	800101a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001022:	f001 ff95 	bl	8002f50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001026:	f7ff ff21 	bl	8000e6c <main>

0800102a <LoopForever>:

LoopForever:
    b LoopForever
 800102a:	e7fe      	b.n	800102a <LoopForever>
   ldr   r0, =_estack
 800102c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001030:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001034:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001038:	0800305c 	.word	0x0800305c
  ldr r2, =_sbss
 800103c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001040:	2000009c 	.word	0x2000009c

08001044 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001044:	e7fe      	b.n	8001044 <ADC1_COMP_IRQHandler>
	...

08001048 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800104e:	1dfb      	adds	r3, r7, #7
 8001050:	2200      	movs	r2, #0
 8001052:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001054:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <HAL_Init+0x3c>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <HAL_Init+0x3c>)
 800105a:	2140      	movs	r1, #64	; 0x40
 800105c:	430a      	orrs	r2, r1
 800105e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001060:	2003      	movs	r0, #3
 8001062:	f000 f811 	bl	8001088 <HAL_InitTick>
 8001066:	1e03      	subs	r3, r0, #0
 8001068:	d003      	beq.n	8001072 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800106a:	1dfb      	adds	r3, r7, #7
 800106c:	2201      	movs	r2, #1
 800106e:	701a      	strb	r2, [r3, #0]
 8001070:	e001      	b.n	8001076 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001072:	f7ff ff8f 	bl	8000f94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001076:	1dfb      	adds	r3, r7, #7
 8001078:	781b      	ldrb	r3, [r3, #0]
}
 800107a:	0018      	movs	r0, r3
 800107c:	46bd      	mov	sp, r7
 800107e:	b002      	add	sp, #8
 8001080:	bd80      	pop	{r7, pc}
 8001082:	46c0      	nop			; (mov r8, r8)
 8001084:	40022000 	.word	0x40022000

08001088 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001088:	b590      	push	{r4, r7, lr}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001090:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <HAL_InitTick+0x5c>)
 8001092:	681c      	ldr	r4, [r3, #0]
 8001094:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <HAL_InitTick+0x60>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	0019      	movs	r1, r3
 800109a:	23fa      	movs	r3, #250	; 0xfa
 800109c:	0098      	lsls	r0, r3, #2
 800109e:	f7ff f833 	bl	8000108 <__udivsi3>
 80010a2:	0003      	movs	r3, r0
 80010a4:	0019      	movs	r1, r3
 80010a6:	0020      	movs	r0, r4
 80010a8:	f7ff f82e 	bl	8000108 <__udivsi3>
 80010ac:	0003      	movs	r3, r0
 80010ae:	0018      	movs	r0, r3
 80010b0:	f000 f905 	bl	80012be <HAL_SYSTICK_Config>
 80010b4:	1e03      	subs	r3, r0, #0
 80010b6:	d001      	beq.n	80010bc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	e00f      	b.n	80010dc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b03      	cmp	r3, #3
 80010c0:	d80b      	bhi.n	80010da <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c2:	6879      	ldr	r1, [r7, #4]
 80010c4:	2301      	movs	r3, #1
 80010c6:	425b      	negs	r3, r3
 80010c8:	2200      	movs	r2, #0
 80010ca:	0018      	movs	r0, r3
 80010cc:	f000 f8e2 	bl	8001294 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010d0:	4b06      	ldr	r3, [pc, #24]	; (80010ec <HAL_InitTick+0x64>)
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010d6:	2300      	movs	r3, #0
 80010d8:	e000      	b.n	80010dc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
}
 80010dc:	0018      	movs	r0, r3
 80010de:	46bd      	mov	sp, r7
 80010e0:	b003      	add	sp, #12
 80010e2:	bd90      	pop	{r4, r7, pc}
 80010e4:	20000000 	.word	0x20000000
 80010e8:	20000008 	.word	0x20000008
 80010ec:	20000004 	.word	0x20000004

080010f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010f4:	4b05      	ldr	r3, [pc, #20]	; (800110c <HAL_IncTick+0x1c>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	001a      	movs	r2, r3
 80010fa:	4b05      	ldr	r3, [pc, #20]	; (8001110 <HAL_IncTick+0x20>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	18d2      	adds	r2, r2, r3
 8001100:	4b03      	ldr	r3, [pc, #12]	; (8001110 <HAL_IncTick+0x20>)
 8001102:	601a      	str	r2, [r3, #0]
}
 8001104:	46c0      	nop			; (mov r8, r8)
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	46c0      	nop			; (mov r8, r8)
 800110c:	20000008 	.word	0x20000008
 8001110:	20000098 	.word	0x20000098

08001114 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  return uwTick;
 8001118:	4b02      	ldr	r3, [pc, #8]	; (8001124 <HAL_GetTick+0x10>)
 800111a:	681b      	ldr	r3, [r3, #0]
}
 800111c:	0018      	movs	r0, r3
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	46c0      	nop			; (mov r8, r8)
 8001124:	20000098 	.word	0x20000098

08001128 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001130:	f7ff fff0 	bl	8001114 <HAL_GetTick>
 8001134:	0003      	movs	r3, r0
 8001136:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	3301      	adds	r3, #1
 8001140:	d005      	beq.n	800114e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001142:	4b0a      	ldr	r3, [pc, #40]	; (800116c <HAL_Delay+0x44>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	001a      	movs	r2, r3
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	189b      	adds	r3, r3, r2
 800114c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800114e:	46c0      	nop			; (mov r8, r8)
 8001150:	f7ff ffe0 	bl	8001114 <HAL_GetTick>
 8001154:	0002      	movs	r2, r0
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	68fa      	ldr	r2, [r7, #12]
 800115c:	429a      	cmp	r2, r3
 800115e:	d8f7      	bhi.n	8001150 <HAL_Delay+0x28>
  {
  }
}
 8001160:	46c0      	nop			; (mov r8, r8)
 8001162:	46c0      	nop			; (mov r8, r8)
 8001164:	46bd      	mov	sp, r7
 8001166:	b004      	add	sp, #16
 8001168:	bd80      	pop	{r7, pc}
 800116a:	46c0      	nop			; (mov r8, r8)
 800116c:	20000008 	.word	0x20000008

08001170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001170:	b590      	push	{r4, r7, lr}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	0002      	movs	r2, r0
 8001178:	6039      	str	r1, [r7, #0]
 800117a:	1dfb      	adds	r3, r7, #7
 800117c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800117e:	1dfb      	adds	r3, r7, #7
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2b7f      	cmp	r3, #127	; 0x7f
 8001184:	d828      	bhi.n	80011d8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001186:	4a2f      	ldr	r2, [pc, #188]	; (8001244 <__NVIC_SetPriority+0xd4>)
 8001188:	1dfb      	adds	r3, r7, #7
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	b25b      	sxtb	r3, r3
 800118e:	089b      	lsrs	r3, r3, #2
 8001190:	33c0      	adds	r3, #192	; 0xc0
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	589b      	ldr	r3, [r3, r2]
 8001196:	1dfa      	adds	r2, r7, #7
 8001198:	7812      	ldrb	r2, [r2, #0]
 800119a:	0011      	movs	r1, r2
 800119c:	2203      	movs	r2, #3
 800119e:	400a      	ands	r2, r1
 80011a0:	00d2      	lsls	r2, r2, #3
 80011a2:	21ff      	movs	r1, #255	; 0xff
 80011a4:	4091      	lsls	r1, r2
 80011a6:	000a      	movs	r2, r1
 80011a8:	43d2      	mvns	r2, r2
 80011aa:	401a      	ands	r2, r3
 80011ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	019b      	lsls	r3, r3, #6
 80011b2:	22ff      	movs	r2, #255	; 0xff
 80011b4:	401a      	ands	r2, r3
 80011b6:	1dfb      	adds	r3, r7, #7
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	0018      	movs	r0, r3
 80011bc:	2303      	movs	r3, #3
 80011be:	4003      	ands	r3, r0
 80011c0:	00db      	lsls	r3, r3, #3
 80011c2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011c4:	481f      	ldr	r0, [pc, #124]	; (8001244 <__NVIC_SetPriority+0xd4>)
 80011c6:	1dfb      	adds	r3, r7, #7
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	b25b      	sxtb	r3, r3
 80011cc:	089b      	lsrs	r3, r3, #2
 80011ce:	430a      	orrs	r2, r1
 80011d0:	33c0      	adds	r3, #192	; 0xc0
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80011d6:	e031      	b.n	800123c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011d8:	4a1b      	ldr	r2, [pc, #108]	; (8001248 <__NVIC_SetPriority+0xd8>)
 80011da:	1dfb      	adds	r3, r7, #7
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	0019      	movs	r1, r3
 80011e0:	230f      	movs	r3, #15
 80011e2:	400b      	ands	r3, r1
 80011e4:	3b08      	subs	r3, #8
 80011e6:	089b      	lsrs	r3, r3, #2
 80011e8:	3306      	adds	r3, #6
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	18d3      	adds	r3, r2, r3
 80011ee:	3304      	adds	r3, #4
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	1dfa      	adds	r2, r7, #7
 80011f4:	7812      	ldrb	r2, [r2, #0]
 80011f6:	0011      	movs	r1, r2
 80011f8:	2203      	movs	r2, #3
 80011fa:	400a      	ands	r2, r1
 80011fc:	00d2      	lsls	r2, r2, #3
 80011fe:	21ff      	movs	r1, #255	; 0xff
 8001200:	4091      	lsls	r1, r2
 8001202:	000a      	movs	r2, r1
 8001204:	43d2      	mvns	r2, r2
 8001206:	401a      	ands	r2, r3
 8001208:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	019b      	lsls	r3, r3, #6
 800120e:	22ff      	movs	r2, #255	; 0xff
 8001210:	401a      	ands	r2, r3
 8001212:	1dfb      	adds	r3, r7, #7
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	0018      	movs	r0, r3
 8001218:	2303      	movs	r3, #3
 800121a:	4003      	ands	r3, r0
 800121c:	00db      	lsls	r3, r3, #3
 800121e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001220:	4809      	ldr	r0, [pc, #36]	; (8001248 <__NVIC_SetPriority+0xd8>)
 8001222:	1dfb      	adds	r3, r7, #7
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	001c      	movs	r4, r3
 8001228:	230f      	movs	r3, #15
 800122a:	4023      	ands	r3, r4
 800122c:	3b08      	subs	r3, #8
 800122e:	089b      	lsrs	r3, r3, #2
 8001230:	430a      	orrs	r2, r1
 8001232:	3306      	adds	r3, #6
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	18c3      	adds	r3, r0, r3
 8001238:	3304      	adds	r3, #4
 800123a:	601a      	str	r2, [r3, #0]
}
 800123c:	46c0      	nop			; (mov r8, r8)
 800123e:	46bd      	mov	sp, r7
 8001240:	b003      	add	sp, #12
 8001242:	bd90      	pop	{r4, r7, pc}
 8001244:	e000e100 	.word	0xe000e100
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	1e5a      	subs	r2, r3, #1
 8001258:	2380      	movs	r3, #128	; 0x80
 800125a:	045b      	lsls	r3, r3, #17
 800125c:	429a      	cmp	r2, r3
 800125e:	d301      	bcc.n	8001264 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001260:	2301      	movs	r3, #1
 8001262:	e010      	b.n	8001286 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001264:	4b0a      	ldr	r3, [pc, #40]	; (8001290 <SysTick_Config+0x44>)
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	3a01      	subs	r2, #1
 800126a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800126c:	2301      	movs	r3, #1
 800126e:	425b      	negs	r3, r3
 8001270:	2103      	movs	r1, #3
 8001272:	0018      	movs	r0, r3
 8001274:	f7ff ff7c 	bl	8001170 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001278:	4b05      	ldr	r3, [pc, #20]	; (8001290 <SysTick_Config+0x44>)
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800127e:	4b04      	ldr	r3, [pc, #16]	; (8001290 <SysTick_Config+0x44>)
 8001280:	2207      	movs	r2, #7
 8001282:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001284:	2300      	movs	r3, #0
}
 8001286:	0018      	movs	r0, r3
 8001288:	46bd      	mov	sp, r7
 800128a:	b002      	add	sp, #8
 800128c:	bd80      	pop	{r7, pc}
 800128e:	46c0      	nop			; (mov r8, r8)
 8001290:	e000e010 	.word	0xe000e010

08001294 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	60b9      	str	r1, [r7, #8]
 800129c:	607a      	str	r2, [r7, #4]
 800129e:	210f      	movs	r1, #15
 80012a0:	187b      	adds	r3, r7, r1
 80012a2:	1c02      	adds	r2, r0, #0
 80012a4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80012a6:	68ba      	ldr	r2, [r7, #8]
 80012a8:	187b      	adds	r3, r7, r1
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	b25b      	sxtb	r3, r3
 80012ae:	0011      	movs	r1, r2
 80012b0:	0018      	movs	r0, r3
 80012b2:	f7ff ff5d 	bl	8001170 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 80012b6:	46c0      	nop			; (mov r8, r8)
 80012b8:	46bd      	mov	sp, r7
 80012ba:	b004      	add	sp, #16
 80012bc:	bd80      	pop	{r7, pc}

080012be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b082      	sub	sp, #8
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	0018      	movs	r0, r3
 80012ca:	f7ff ffbf 	bl	800124c <SysTick_Config>
 80012ce:	0003      	movs	r3, r0
}
 80012d0:	0018      	movs	r0, r3
 80012d2:	46bd      	mov	sp, r7
 80012d4:	b002      	add	sp, #8
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012e2:	2300      	movs	r3, #0
 80012e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80012ea:	2300      	movs	r3, #0
 80012ec:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80012ee:	e14f      	b.n	8001590 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2101      	movs	r1, #1
 80012f6:	697a      	ldr	r2, [r7, #20]
 80012f8:	4091      	lsls	r1, r2
 80012fa:	000a      	movs	r2, r1
 80012fc:	4013      	ands	r3, r2
 80012fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d100      	bne.n	8001308 <HAL_GPIO_Init+0x30>
 8001306:	e140      	b.n	800158a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	2203      	movs	r2, #3
 800130e:	4013      	ands	r3, r2
 8001310:	2b01      	cmp	r3, #1
 8001312:	d005      	beq.n	8001320 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	2203      	movs	r2, #3
 800131a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800131c:	2b02      	cmp	r3, #2
 800131e:	d130      	bne.n	8001382 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	2203      	movs	r2, #3
 800132c:	409a      	lsls	r2, r3
 800132e:	0013      	movs	r3, r2
 8001330:	43da      	mvns	r2, r3
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	4013      	ands	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	68da      	ldr	r2, [r3, #12]
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	409a      	lsls	r2, r3
 8001342:	0013      	movs	r3, r2
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	4313      	orrs	r3, r2
 8001348:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001356:	2201      	movs	r2, #1
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	409a      	lsls	r2, r3
 800135c:	0013      	movs	r3, r2
 800135e:	43da      	mvns	r2, r3
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	4013      	ands	r3, r2
 8001364:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	091b      	lsrs	r3, r3, #4
 800136c:	2201      	movs	r2, #1
 800136e:	401a      	ands	r2, r3
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	409a      	lsls	r2, r3
 8001374:	0013      	movs	r3, r2
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4313      	orrs	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	2203      	movs	r2, #3
 8001388:	4013      	ands	r3, r2
 800138a:	2b03      	cmp	r3, #3
 800138c:	d017      	beq.n	80013be <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	2203      	movs	r2, #3
 800139a:	409a      	lsls	r2, r3
 800139c:	0013      	movs	r3, r2
 800139e:	43da      	mvns	r2, r3
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	4013      	ands	r3, r2
 80013a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	689a      	ldr	r2, [r3, #8]
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	409a      	lsls	r2, r3
 80013b0:	0013      	movs	r3, r2
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	2203      	movs	r2, #3
 80013c4:	4013      	ands	r3, r2
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d123      	bne.n	8001412 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	08da      	lsrs	r2, r3, #3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	3208      	adds	r2, #8
 80013d2:	0092      	lsls	r2, r2, #2
 80013d4:	58d3      	ldr	r3, [r2, r3]
 80013d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	2207      	movs	r2, #7
 80013dc:	4013      	ands	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	220f      	movs	r2, #15
 80013e2:	409a      	lsls	r2, r3
 80013e4:	0013      	movs	r3, r2
 80013e6:	43da      	mvns	r2, r3
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	4013      	ands	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	691a      	ldr	r2, [r3, #16]
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	2107      	movs	r1, #7
 80013f6:	400b      	ands	r3, r1
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	409a      	lsls	r2, r3
 80013fc:	0013      	movs	r3, r2
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	08da      	lsrs	r2, r3, #3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3208      	adds	r2, #8
 800140c:	0092      	lsls	r2, r2, #2
 800140e:	6939      	ldr	r1, [r7, #16]
 8001410:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	2203      	movs	r2, #3
 800141e:	409a      	lsls	r2, r3
 8001420:	0013      	movs	r3, r2
 8001422:	43da      	mvns	r2, r3
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	4013      	ands	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2203      	movs	r2, #3
 8001430:	401a      	ands	r2, r3
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	409a      	lsls	r2, r3
 8001438:	0013      	movs	r3, r2
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	4313      	orrs	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685a      	ldr	r2, [r3, #4]
 800144a:	23c0      	movs	r3, #192	; 0xc0
 800144c:	029b      	lsls	r3, r3, #10
 800144e:	4013      	ands	r3, r2
 8001450:	d100      	bne.n	8001454 <HAL_GPIO_Init+0x17c>
 8001452:	e09a      	b.n	800158a <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001454:	4b54      	ldr	r3, [pc, #336]	; (80015a8 <HAL_GPIO_Init+0x2d0>)
 8001456:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001458:	4b53      	ldr	r3, [pc, #332]	; (80015a8 <HAL_GPIO_Init+0x2d0>)
 800145a:	2101      	movs	r1, #1
 800145c:	430a      	orrs	r2, r1
 800145e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001460:	4a52      	ldr	r2, [pc, #328]	; (80015ac <HAL_GPIO_Init+0x2d4>)
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	089b      	lsrs	r3, r3, #2
 8001466:	3302      	adds	r3, #2
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	589b      	ldr	r3, [r3, r2]
 800146c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	2203      	movs	r2, #3
 8001472:	4013      	ands	r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	220f      	movs	r2, #15
 8001478:	409a      	lsls	r2, r3
 800147a:	0013      	movs	r3, r2
 800147c:	43da      	mvns	r2, r3
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	4013      	ands	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	23a0      	movs	r3, #160	; 0xa0
 8001488:	05db      	lsls	r3, r3, #23
 800148a:	429a      	cmp	r2, r3
 800148c:	d019      	beq.n	80014c2 <HAL_GPIO_Init+0x1ea>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a47      	ldr	r2, [pc, #284]	; (80015b0 <HAL_GPIO_Init+0x2d8>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d013      	beq.n	80014be <HAL_GPIO_Init+0x1e6>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a46      	ldr	r2, [pc, #280]	; (80015b4 <HAL_GPIO_Init+0x2dc>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d00d      	beq.n	80014ba <HAL_GPIO_Init+0x1e2>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a45      	ldr	r2, [pc, #276]	; (80015b8 <HAL_GPIO_Init+0x2e0>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d007      	beq.n	80014b6 <HAL_GPIO_Init+0x1de>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a44      	ldr	r2, [pc, #272]	; (80015bc <HAL_GPIO_Init+0x2e4>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d101      	bne.n	80014b2 <HAL_GPIO_Init+0x1da>
 80014ae:	2305      	movs	r3, #5
 80014b0:	e008      	b.n	80014c4 <HAL_GPIO_Init+0x1ec>
 80014b2:	2306      	movs	r3, #6
 80014b4:	e006      	b.n	80014c4 <HAL_GPIO_Init+0x1ec>
 80014b6:	2303      	movs	r3, #3
 80014b8:	e004      	b.n	80014c4 <HAL_GPIO_Init+0x1ec>
 80014ba:	2302      	movs	r3, #2
 80014bc:	e002      	b.n	80014c4 <HAL_GPIO_Init+0x1ec>
 80014be:	2301      	movs	r3, #1
 80014c0:	e000      	b.n	80014c4 <HAL_GPIO_Init+0x1ec>
 80014c2:	2300      	movs	r3, #0
 80014c4:	697a      	ldr	r2, [r7, #20]
 80014c6:	2103      	movs	r1, #3
 80014c8:	400a      	ands	r2, r1
 80014ca:	0092      	lsls	r2, r2, #2
 80014cc:	4093      	lsls	r3, r2
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014d4:	4935      	ldr	r1, [pc, #212]	; (80015ac <HAL_GPIO_Init+0x2d4>)
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	089b      	lsrs	r3, r3, #2
 80014da:	3302      	adds	r3, #2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014e2:	4b37      	ldr	r3, [pc, #220]	; (80015c0 <HAL_GPIO_Init+0x2e8>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	43da      	mvns	r2, r3
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	4013      	ands	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685a      	ldr	r2, [r3, #4]
 80014f6:	2380      	movs	r3, #128	; 0x80
 80014f8:	035b      	lsls	r3, r3, #13
 80014fa:	4013      	ands	r3, r2
 80014fc:	d003      	beq.n	8001506 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	4313      	orrs	r3, r2
 8001504:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001506:	4b2e      	ldr	r3, [pc, #184]	; (80015c0 <HAL_GPIO_Init+0x2e8>)
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800150c:	4b2c      	ldr	r3, [pc, #176]	; (80015c0 <HAL_GPIO_Init+0x2e8>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	43da      	mvns	r2, r3
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	4013      	ands	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685a      	ldr	r2, [r3, #4]
 8001520:	2380      	movs	r3, #128	; 0x80
 8001522:	039b      	lsls	r3, r3, #14
 8001524:	4013      	ands	r3, r2
 8001526:	d003      	beq.n	8001530 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	4313      	orrs	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001530:	4b23      	ldr	r3, [pc, #140]	; (80015c0 <HAL_GPIO_Init+0x2e8>)
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001536:	4b22      	ldr	r3, [pc, #136]	; (80015c0 <HAL_GPIO_Init+0x2e8>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	43da      	mvns	r2, r3
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	4013      	ands	r3, r2
 8001544:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685a      	ldr	r2, [r3, #4]
 800154a:	2380      	movs	r3, #128	; 0x80
 800154c:	029b      	lsls	r3, r3, #10
 800154e:	4013      	ands	r3, r2
 8001550:	d003      	beq.n	800155a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	4313      	orrs	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800155a:	4b19      	ldr	r3, [pc, #100]	; (80015c0 <HAL_GPIO_Init+0x2e8>)
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001560:	4b17      	ldr	r3, [pc, #92]	; (80015c0 <HAL_GPIO_Init+0x2e8>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	43da      	mvns	r2, r3
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	4013      	ands	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685a      	ldr	r2, [r3, #4]
 8001574:	2380      	movs	r3, #128	; 0x80
 8001576:	025b      	lsls	r3, r3, #9
 8001578:	4013      	ands	r3, r2
 800157a:	d003      	beq.n	8001584 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	4313      	orrs	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001584:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <HAL_GPIO_Init+0x2e8>)
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	3301      	adds	r3, #1
 800158e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	40da      	lsrs	r2, r3
 8001598:	1e13      	subs	r3, r2, #0
 800159a:	d000      	beq.n	800159e <HAL_GPIO_Init+0x2c6>
 800159c:	e6a8      	b.n	80012f0 <HAL_GPIO_Init+0x18>
  }
}
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	46c0      	nop			; (mov r8, r8)
 80015a2:	46bd      	mov	sp, r7
 80015a4:	b006      	add	sp, #24
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40021000 	.word	0x40021000
 80015ac:	40010000 	.word	0x40010000
 80015b0:	50000400 	.word	0x50000400
 80015b4:	50000800 	.word	0x50000800
 80015b8:	50000c00 	.word	0x50000c00
 80015bc:	50001c00 	.word	0x50001c00
 80015c0:	40010400 	.word	0x40010400

080015c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d101      	bne.n	80015d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e08f      	b.n	80016f6 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2241      	movs	r2, #65	; 0x41
 80015da:	5c9b      	ldrb	r3, [r3, r2]
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d107      	bne.n	80015f2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2240      	movs	r2, #64	; 0x40
 80015e6:	2100      	movs	r1, #0
 80015e8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	0018      	movs	r0, r3
 80015ee:	f7ff fbf9 	bl	8000de4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2241      	movs	r2, #65	; 0x41
 80015f6:	2124      	movs	r1, #36	; 0x24
 80015f8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2101      	movs	r1, #1
 8001606:	438a      	bics	r2, r1
 8001608:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685a      	ldr	r2, [r3, #4]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	493b      	ldr	r1, [pc, #236]	; (8001700 <HAL_I2C_Init+0x13c>)
 8001614:	400a      	ands	r2, r1
 8001616:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	689a      	ldr	r2, [r3, #8]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4938      	ldr	r1, [pc, #224]	; (8001704 <HAL_I2C_Init+0x140>)
 8001624:	400a      	ands	r2, r1
 8001626:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d108      	bne.n	8001642 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689a      	ldr	r2, [r3, #8]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2180      	movs	r1, #128	; 0x80
 800163a:	0209      	lsls	r1, r1, #8
 800163c:	430a      	orrs	r2, r1
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	e007      	b.n	8001652 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	689a      	ldr	r2, [r3, #8]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2184      	movs	r1, #132	; 0x84
 800164c:	0209      	lsls	r1, r1, #8
 800164e:	430a      	orrs	r2, r1
 8001650:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	2b02      	cmp	r3, #2
 8001658:	d109      	bne.n	800166e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	685a      	ldr	r2, [r3, #4]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2180      	movs	r1, #128	; 0x80
 8001666:	0109      	lsls	r1, r1, #4
 8001668:	430a      	orrs	r2, r1
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	e007      	b.n	800167e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	685a      	ldr	r2, [r3, #4]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4923      	ldr	r1, [pc, #140]	; (8001708 <HAL_I2C_Init+0x144>)
 800167a:	400a      	ands	r2, r1
 800167c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	685a      	ldr	r2, [r3, #4]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4920      	ldr	r1, [pc, #128]	; (800170c <HAL_I2C_Init+0x148>)
 800168a:	430a      	orrs	r2, r1
 800168c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	68da      	ldr	r2, [r3, #12]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	491a      	ldr	r1, [pc, #104]	; (8001704 <HAL_I2C_Init+0x140>)
 800169a:	400a      	ands	r2, r1
 800169c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	691a      	ldr	r2, [r3, #16]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	695b      	ldr	r3, [r3, #20]
 80016a6:	431a      	orrs	r2, r3
 80016a8:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	430a      	orrs	r2, r1
 80016b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	69d9      	ldr	r1, [r3, #28]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a1a      	ldr	r2, [r3, #32]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	430a      	orrs	r2, r1
 80016c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2101      	movs	r1, #1
 80016d4:	430a      	orrs	r2, r1
 80016d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2241      	movs	r2, #65	; 0x41
 80016e2:	2120      	movs	r1, #32
 80016e4:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2242      	movs	r2, #66	; 0x42
 80016f0:	2100      	movs	r1, #0
 80016f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	0018      	movs	r0, r3
 80016f8:	46bd      	mov	sp, r7
 80016fa:	b002      	add	sp, #8
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	46c0      	nop			; (mov r8, r8)
 8001700:	f0ffffff 	.word	0xf0ffffff
 8001704:	ffff7fff 	.word	0xffff7fff
 8001708:	fffff7ff 	.word	0xfffff7ff
 800170c:	02008000 	.word	0x02008000

08001710 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001710:	b590      	push	{r4, r7, lr}
 8001712:	b089      	sub	sp, #36	; 0x24
 8001714:	af02      	add	r7, sp, #8
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	0008      	movs	r0, r1
 800171a:	607a      	str	r2, [r7, #4]
 800171c:	0019      	movs	r1, r3
 800171e:	230a      	movs	r3, #10
 8001720:	18fb      	adds	r3, r7, r3
 8001722:	1c02      	adds	r2, r0, #0
 8001724:	801a      	strh	r2, [r3, #0]
 8001726:	2308      	movs	r3, #8
 8001728:	18fb      	adds	r3, r7, r3
 800172a:	1c0a      	adds	r2, r1, #0
 800172c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2241      	movs	r2, #65	; 0x41
 8001732:	5c9b      	ldrb	r3, [r3, r2]
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b20      	cmp	r3, #32
 8001738:	d000      	beq.n	800173c <HAL_I2C_Master_Transmit+0x2c>
 800173a:	e10a      	b.n	8001952 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2240      	movs	r2, #64	; 0x40
 8001740:	5c9b      	ldrb	r3, [r3, r2]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d101      	bne.n	800174a <HAL_I2C_Master_Transmit+0x3a>
 8001746:	2302      	movs	r3, #2
 8001748:	e104      	b.n	8001954 <HAL_I2C_Master_Transmit+0x244>
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2240      	movs	r2, #64	; 0x40
 800174e:	2101      	movs	r1, #1
 8001750:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001752:	f7ff fcdf 	bl	8001114 <HAL_GetTick>
 8001756:	0003      	movs	r3, r0
 8001758:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800175a:	2380      	movs	r3, #128	; 0x80
 800175c:	0219      	lsls	r1, r3, #8
 800175e:	68f8      	ldr	r0, [r7, #12]
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	2319      	movs	r3, #25
 8001766:	2201      	movs	r2, #1
 8001768:	f000 fa26 	bl	8001bb8 <I2C_WaitOnFlagUntilTimeout>
 800176c:	1e03      	subs	r3, r0, #0
 800176e:	d001      	beq.n	8001774 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e0ef      	b.n	8001954 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2241      	movs	r2, #65	; 0x41
 8001778:	2121      	movs	r1, #33	; 0x21
 800177a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2242      	movs	r2, #66	; 0x42
 8001780:	2110      	movs	r1, #16
 8001782:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2200      	movs	r2, #0
 8001788:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2208      	movs	r2, #8
 8001794:	18ba      	adds	r2, r7, r2
 8001796:	8812      	ldrh	r2, [r2, #0]
 8001798:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2200      	movs	r2, #0
 800179e:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	2bff      	cmp	r3, #255	; 0xff
 80017a8:	d906      	bls.n	80017b8 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	22ff      	movs	r2, #255	; 0xff
 80017ae:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80017b0:	2380      	movs	r3, #128	; 0x80
 80017b2:	045b      	lsls	r3, r3, #17
 80017b4:	617b      	str	r3, [r7, #20]
 80017b6:	e007      	b.n	80017c8 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017bc:	b29a      	uxth	r2, r3
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80017c2:	2380      	movs	r3, #128	; 0x80
 80017c4:	049b      	lsls	r3, r3, #18
 80017c6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d027      	beq.n	8001820 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d4:	781a      	ldrb	r2, [r3, #0]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e0:	1c5a      	adds	r2, r3, #1
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	3b01      	subs	r3, #1
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017f8:	3b01      	subs	r3, #1
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001804:	b2db      	uxtb	r3, r3
 8001806:	3301      	adds	r3, #1
 8001808:	b2da      	uxtb	r2, r3
 800180a:	697c      	ldr	r4, [r7, #20]
 800180c:	230a      	movs	r3, #10
 800180e:	18fb      	adds	r3, r7, r3
 8001810:	8819      	ldrh	r1, [r3, #0]
 8001812:	68f8      	ldr	r0, [r7, #12]
 8001814:	4b51      	ldr	r3, [pc, #324]	; (800195c <HAL_I2C_Master_Transmit+0x24c>)
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	0023      	movs	r3, r4
 800181a:	f000 fc4d 	bl	80020b8 <I2C_TransferConfig>
 800181e:	e06f      	b.n	8001900 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001824:	b2da      	uxtb	r2, r3
 8001826:	697c      	ldr	r4, [r7, #20]
 8001828:	230a      	movs	r3, #10
 800182a:	18fb      	adds	r3, r7, r3
 800182c:	8819      	ldrh	r1, [r3, #0]
 800182e:	68f8      	ldr	r0, [r7, #12]
 8001830:	4b4a      	ldr	r3, [pc, #296]	; (800195c <HAL_I2C_Master_Transmit+0x24c>)
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	0023      	movs	r3, r4
 8001836:	f000 fc3f 	bl	80020b8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800183a:	e061      	b.n	8001900 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	0018      	movs	r0, r3
 8001844:	f000 fa10 	bl	8001c68 <I2C_WaitOnTXISFlagUntilTimeout>
 8001848:	1e03      	subs	r3, r0, #0
 800184a:	d001      	beq.n	8001850 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e081      	b.n	8001954 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001854:	781a      	ldrb	r2, [r3, #0]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001860:	1c5a      	adds	r2, r3, #1
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800186a:	b29b      	uxth	r3, r3
 800186c:	3b01      	subs	r3, #1
 800186e:	b29a      	uxth	r2, r3
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001878:	3b01      	subs	r3, #1
 800187a:	b29a      	uxth	r2, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001884:	b29b      	uxth	r3, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	d03a      	beq.n	8001900 <HAL_I2C_Master_Transmit+0x1f0>
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800188e:	2b00      	cmp	r3, #0
 8001890:	d136      	bne.n	8001900 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001892:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001894:	68f8      	ldr	r0, [r7, #12]
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	9300      	str	r3, [sp, #0]
 800189a:	0013      	movs	r3, r2
 800189c:	2200      	movs	r2, #0
 800189e:	2180      	movs	r1, #128	; 0x80
 80018a0:	f000 f98a 	bl	8001bb8 <I2C_WaitOnFlagUntilTimeout>
 80018a4:	1e03      	subs	r3, r0, #0
 80018a6:	d001      	beq.n	80018ac <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e053      	b.n	8001954 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	2bff      	cmp	r3, #255	; 0xff
 80018b4:	d911      	bls.n	80018da <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	22ff      	movs	r2, #255	; 0xff
 80018ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018c0:	b2da      	uxtb	r2, r3
 80018c2:	2380      	movs	r3, #128	; 0x80
 80018c4:	045c      	lsls	r4, r3, #17
 80018c6:	230a      	movs	r3, #10
 80018c8:	18fb      	adds	r3, r7, r3
 80018ca:	8819      	ldrh	r1, [r3, #0]
 80018cc:	68f8      	ldr	r0, [r7, #12]
 80018ce:	2300      	movs	r3, #0
 80018d0:	9300      	str	r3, [sp, #0]
 80018d2:	0023      	movs	r3, r4
 80018d4:	f000 fbf0 	bl	80020b8 <I2C_TransferConfig>
 80018d8:	e012      	b.n	8001900 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018de:	b29a      	uxth	r2, r3
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	2380      	movs	r3, #128	; 0x80
 80018ec:	049c      	lsls	r4, r3, #18
 80018ee:	230a      	movs	r3, #10
 80018f0:	18fb      	adds	r3, r7, r3
 80018f2:	8819      	ldrh	r1, [r3, #0]
 80018f4:	68f8      	ldr	r0, [r7, #12]
 80018f6:	2300      	movs	r3, #0
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	0023      	movs	r3, r4
 80018fc:	f000 fbdc 	bl	80020b8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001904:	b29b      	uxth	r3, r3
 8001906:	2b00      	cmp	r3, #0
 8001908:	d198      	bne.n	800183c <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	0018      	movs	r0, r3
 8001912:	f000 f9ef 	bl	8001cf4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001916:	1e03      	subs	r3, r0, #0
 8001918:	d001      	beq.n	800191e <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e01a      	b.n	8001954 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2220      	movs	r2, #32
 8001924:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	685a      	ldr	r2, [r3, #4]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	490b      	ldr	r1, [pc, #44]	; (8001960 <HAL_I2C_Master_Transmit+0x250>)
 8001932:	400a      	ands	r2, r1
 8001934:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2241      	movs	r2, #65	; 0x41
 800193a:	2120      	movs	r1, #32
 800193c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2242      	movs	r2, #66	; 0x42
 8001942:	2100      	movs	r1, #0
 8001944:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2240      	movs	r2, #64	; 0x40
 800194a:	2100      	movs	r1, #0
 800194c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800194e:	2300      	movs	r3, #0
 8001950:	e000      	b.n	8001954 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8001952:	2302      	movs	r3, #2
  }
}
 8001954:	0018      	movs	r0, r3
 8001956:	46bd      	mov	sp, r7
 8001958:	b007      	add	sp, #28
 800195a:	bd90      	pop	{r4, r7, pc}
 800195c:	80002000 	.word	0x80002000
 8001960:	fe00e800 	.word	0xfe00e800

08001964 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001964:	b590      	push	{r4, r7, lr}
 8001966:	b089      	sub	sp, #36	; 0x24
 8001968:	af02      	add	r7, sp, #8
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	0008      	movs	r0, r1
 800196e:	607a      	str	r2, [r7, #4]
 8001970:	0019      	movs	r1, r3
 8001972:	230a      	movs	r3, #10
 8001974:	18fb      	adds	r3, r7, r3
 8001976:	1c02      	adds	r2, r0, #0
 8001978:	801a      	strh	r2, [r3, #0]
 800197a:	2308      	movs	r3, #8
 800197c:	18fb      	adds	r3, r7, r3
 800197e:	1c0a      	adds	r2, r1, #0
 8001980:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2241      	movs	r2, #65	; 0x41
 8001986:	5c9b      	ldrb	r3, [r3, r2]
 8001988:	b2db      	uxtb	r3, r3
 800198a:	2b20      	cmp	r3, #32
 800198c:	d000      	beq.n	8001990 <HAL_I2C_Master_Receive+0x2c>
 800198e:	e0e8      	b.n	8001b62 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2240      	movs	r2, #64	; 0x40
 8001994:	5c9b      	ldrb	r3, [r3, r2]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d101      	bne.n	800199e <HAL_I2C_Master_Receive+0x3a>
 800199a:	2302      	movs	r3, #2
 800199c:	e0e2      	b.n	8001b64 <HAL_I2C_Master_Receive+0x200>
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2240      	movs	r2, #64	; 0x40
 80019a2:	2101      	movs	r1, #1
 80019a4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80019a6:	f7ff fbb5 	bl	8001114 <HAL_GetTick>
 80019aa:	0003      	movs	r3, r0
 80019ac:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80019ae:	2380      	movs	r3, #128	; 0x80
 80019b0:	0219      	lsls	r1, r3, #8
 80019b2:	68f8      	ldr	r0, [r7, #12]
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	2319      	movs	r3, #25
 80019ba:	2201      	movs	r2, #1
 80019bc:	f000 f8fc 	bl	8001bb8 <I2C_WaitOnFlagUntilTimeout>
 80019c0:	1e03      	subs	r3, r0, #0
 80019c2:	d001      	beq.n	80019c8 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e0cd      	b.n	8001b64 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2241      	movs	r2, #65	; 0x41
 80019cc:	2122      	movs	r1, #34	; 0x22
 80019ce:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2242      	movs	r2, #66	; 0x42
 80019d4:	2110      	movs	r1, #16
 80019d6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2200      	movs	r2, #0
 80019dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2208      	movs	r2, #8
 80019e8:	18ba      	adds	r2, r7, r2
 80019ea:	8812      	ldrh	r2, [r2, #0]
 80019ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2200      	movs	r2, #0
 80019f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	2bff      	cmp	r3, #255	; 0xff
 80019fc:	d911      	bls.n	8001a22 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = 1U;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2201      	movs	r2, #1
 8001a02:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a08:	b2da      	uxtb	r2, r3
 8001a0a:	2380      	movs	r3, #128	; 0x80
 8001a0c:	045c      	lsls	r4, r3, #17
 8001a0e:	230a      	movs	r3, #10
 8001a10:	18fb      	adds	r3, r7, r3
 8001a12:	8819      	ldrh	r1, [r3, #0]
 8001a14:	68f8      	ldr	r0, [r7, #12]
 8001a16:	4b55      	ldr	r3, [pc, #340]	; (8001b6c <HAL_I2C_Master_Receive+0x208>)
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	0023      	movs	r3, r4
 8001a1c:	f000 fb4c 	bl	80020b8 <I2C_TransferConfig>
 8001a20:	e076      	b.n	8001b10 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	2380      	movs	r3, #128	; 0x80
 8001a34:	049c      	lsls	r4, r3, #18
 8001a36:	230a      	movs	r3, #10
 8001a38:	18fb      	adds	r3, r7, r3
 8001a3a:	8819      	ldrh	r1, [r3, #0]
 8001a3c:	68f8      	ldr	r0, [r7, #12]
 8001a3e:	4b4b      	ldr	r3, [pc, #300]	; (8001b6c <HAL_I2C_Master_Receive+0x208>)
 8001a40:	9300      	str	r3, [sp, #0]
 8001a42:	0023      	movs	r3, r4
 8001a44:	f000 fb38 	bl	80020b8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001a48:	e062      	b.n	8001b10 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	0018      	movs	r0, r3
 8001a52:	f000 f993 	bl	8001d7c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a56:	1e03      	subs	r3, r0, #0
 8001a58:	d001      	beq.n	8001a5e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e082      	b.n	8001b64 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a68:	b2d2      	uxtb	r2, r2
 8001a6a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a70:	1c5a      	adds	r2, r3, #1
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d03a      	beq.n	8001b10 <HAL_I2C_Master_Receive+0x1ac>
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d136      	bne.n	8001b10 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001aa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001aa4:	68f8      	ldr	r0, [r7, #12]
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	9300      	str	r3, [sp, #0]
 8001aaa:	0013      	movs	r3, r2
 8001aac:	2200      	movs	r2, #0
 8001aae:	2180      	movs	r1, #128	; 0x80
 8001ab0:	f000 f882 	bl	8001bb8 <I2C_WaitOnFlagUntilTimeout>
 8001ab4:	1e03      	subs	r3, r0, #0
 8001ab6:	d001      	beq.n	8001abc <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e053      	b.n	8001b64 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	2bff      	cmp	r3, #255	; 0xff
 8001ac4:	d911      	bls.n	8001aea <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	22ff      	movs	r2, #255	; 0xff
 8001aca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ad0:	b2da      	uxtb	r2, r3
 8001ad2:	2380      	movs	r3, #128	; 0x80
 8001ad4:	045c      	lsls	r4, r3, #17
 8001ad6:	230a      	movs	r3, #10
 8001ad8:	18fb      	adds	r3, r7, r3
 8001ada:	8819      	ldrh	r1, [r3, #0]
 8001adc:	68f8      	ldr	r0, [r7, #12]
 8001ade:	2300      	movs	r3, #0
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	0023      	movs	r3, r4
 8001ae4:	f000 fae8 	bl	80020b8 <I2C_TransferConfig>
 8001ae8:	e012      	b.n	8001b10 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001af8:	b2da      	uxtb	r2, r3
 8001afa:	2380      	movs	r3, #128	; 0x80
 8001afc:	049c      	lsls	r4, r3, #18
 8001afe:	230a      	movs	r3, #10
 8001b00:	18fb      	adds	r3, r7, r3
 8001b02:	8819      	ldrh	r1, [r3, #0]
 8001b04:	68f8      	ldr	r0, [r7, #12]
 8001b06:	2300      	movs	r3, #0
 8001b08:	9300      	str	r3, [sp, #0]
 8001b0a:	0023      	movs	r3, r4
 8001b0c:	f000 fad4 	bl	80020b8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d197      	bne.n	8001a4a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b1a:	697a      	ldr	r2, [r7, #20]
 8001b1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	0018      	movs	r0, r3
 8001b22:	f000 f8e7 	bl	8001cf4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b26:	1e03      	subs	r3, r0, #0
 8001b28:	d001      	beq.n	8001b2e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e01a      	b.n	8001b64 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2220      	movs	r2, #32
 8001b34:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	685a      	ldr	r2, [r3, #4]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	490b      	ldr	r1, [pc, #44]	; (8001b70 <HAL_I2C_Master_Receive+0x20c>)
 8001b42:	400a      	ands	r2, r1
 8001b44:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2241      	movs	r2, #65	; 0x41
 8001b4a:	2120      	movs	r1, #32
 8001b4c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2242      	movs	r2, #66	; 0x42
 8001b52:	2100      	movs	r1, #0
 8001b54:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2240      	movs	r2, #64	; 0x40
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	e000      	b.n	8001b64 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8001b62:	2302      	movs	r3, #2
  }
}
 8001b64:	0018      	movs	r0, r3
 8001b66:	46bd      	mov	sp, r7
 8001b68:	b007      	add	sp, #28
 8001b6a:	bd90      	pop	{r4, r7, pc}
 8001b6c:	80002400 	.word	0x80002400
 8001b70:	fe00e800 	.word	0xfe00e800

08001b74 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	2202      	movs	r2, #2
 8001b84:	4013      	ands	r3, r2
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d103      	bne.n	8001b92 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d007      	beq.n	8001bb0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	699a      	ldr	r2, [r3, #24]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2101      	movs	r1, #1
 8001bac:	430a      	orrs	r2, r1
 8001bae:	619a      	str	r2, [r3, #24]
  }
}
 8001bb0:	46c0      	nop			; (mov r8, r8)
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	b002      	add	sp, #8
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	603b      	str	r3, [r7, #0]
 8001bc4:	1dfb      	adds	r3, r7, #7
 8001bc6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bc8:	e03a      	b.n	8001c40 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	6839      	ldr	r1, [r7, #0]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	0018      	movs	r0, r3
 8001bd2:	f000 f971 	bl	8001eb8 <I2C_IsErrorOccurred>
 8001bd6:	1e03      	subs	r3, r0, #0
 8001bd8:	d001      	beq.n	8001bde <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e040      	b.n	8001c60 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	3301      	adds	r3, #1
 8001be2:	d02d      	beq.n	8001c40 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001be4:	f7ff fa96 	bl	8001114 <HAL_GetTick>
 8001be8:	0002      	movs	r2, r0
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d302      	bcc.n	8001bfa <I2C_WaitOnFlagUntilTimeout+0x42>
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d122      	bne.n	8001c40 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	68ba      	ldr	r2, [r7, #8]
 8001c02:	4013      	ands	r3, r2
 8001c04:	68ba      	ldr	r2, [r7, #8]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	425a      	negs	r2, r3
 8001c0a:	4153      	adcs	r3, r2
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	001a      	movs	r2, r3
 8001c10:	1dfb      	adds	r3, r7, #7
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d113      	bne.n	8001c40 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1c:	2220      	movs	r2, #32
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2241      	movs	r2, #65	; 0x41
 8001c28:	2120      	movs	r1, #32
 8001c2a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2242      	movs	r2, #66	; 0x42
 8001c30:	2100      	movs	r1, #0
 8001c32:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2240      	movs	r2, #64	; 0x40
 8001c38:	2100      	movs	r1, #0
 8001c3a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e00f      	b.n	8001c60 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	68ba      	ldr	r2, [r7, #8]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	68ba      	ldr	r2, [r7, #8]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	425a      	negs	r2, r3
 8001c50:	4153      	adcs	r3, r2
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	001a      	movs	r2, r3
 8001c56:	1dfb      	adds	r3, r7, #7
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d0b5      	beq.n	8001bca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	0018      	movs	r0, r3
 8001c62:	46bd      	mov	sp, r7
 8001c64:	b004      	add	sp, #16
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c74:	e032      	b.n	8001cdc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	68b9      	ldr	r1, [r7, #8]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	f000 f91b 	bl	8001eb8 <I2C_IsErrorOccurred>
 8001c82:	1e03      	subs	r3, r0, #0
 8001c84:	d001      	beq.n	8001c8a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e030      	b.n	8001cec <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	d025      	beq.n	8001cdc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c90:	f7ff fa40 	bl	8001114 <HAL_GetTick>
 8001c94:	0002      	movs	r2, r0
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	68ba      	ldr	r2, [r7, #8]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d302      	bcc.n	8001ca6 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d11a      	bne.n	8001cdc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	2202      	movs	r2, #2
 8001cae:	4013      	ands	r3, r2
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d013      	beq.n	8001cdc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb8:	2220      	movs	r2, #32
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2241      	movs	r2, #65	; 0x41
 8001cc4:	2120      	movs	r1, #32
 8001cc6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2242      	movs	r2, #66	; 0x42
 8001ccc:	2100      	movs	r1, #0
 8001cce:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2240      	movs	r2, #64	; 0x40
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e007      	b.n	8001cec <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	699b      	ldr	r3, [r3, #24]
 8001ce2:	2202      	movs	r2, #2
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d1c5      	bne.n	8001c76 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	0018      	movs	r0, r3
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	b004      	add	sp, #16
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d00:	e02f      	b.n	8001d62 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	68b9      	ldr	r1, [r7, #8]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	0018      	movs	r0, r3
 8001d0a:	f000 f8d5 	bl	8001eb8 <I2C_IsErrorOccurred>
 8001d0e:	1e03      	subs	r3, r0, #0
 8001d10:	d001      	beq.n	8001d16 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e02d      	b.n	8001d72 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d16:	f7ff f9fd 	bl	8001114 <HAL_GetTick>
 8001d1a:	0002      	movs	r2, r0
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	68ba      	ldr	r2, [r7, #8]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d302      	bcc.n	8001d2c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d11a      	bne.n	8001d62 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	2220      	movs	r2, #32
 8001d34:	4013      	ands	r3, r2
 8001d36:	2b20      	cmp	r3, #32
 8001d38:	d013      	beq.n	8001d62 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3e:	2220      	movs	r2, #32
 8001d40:	431a      	orrs	r2, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2241      	movs	r2, #65	; 0x41
 8001d4a:	2120      	movs	r1, #32
 8001d4c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2242      	movs	r2, #66	; 0x42
 8001d52:	2100      	movs	r1, #0
 8001d54:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2240      	movs	r2, #64	; 0x40
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e007      	b.n	8001d72 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	2220      	movs	r2, #32
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	2b20      	cmp	r3, #32
 8001d6e:	d1c8      	bne.n	8001d02 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	0018      	movs	r0, r3
 8001d74:	46bd      	mov	sp, r7
 8001d76:	b004      	add	sp, #16
 8001d78:	bd80      	pop	{r7, pc}
	...

08001d7c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d88:	2317      	movs	r3, #23
 8001d8a:	18fb      	adds	r3, r7, r3
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8001d90:	e07b      	b.n	8001e8a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	68b9      	ldr	r1, [r7, #8]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	0018      	movs	r0, r3
 8001d9a:	f000 f88d 	bl	8001eb8 <I2C_IsErrorOccurred>
 8001d9e:	1e03      	subs	r3, r0, #0
 8001da0:	d003      	beq.n	8001daa <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8001da2:	2317      	movs	r3, #23
 8001da4:	18fb      	adds	r3, r7, r3
 8001da6:	2201      	movs	r2, #1
 8001da8:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	2220      	movs	r2, #32
 8001db2:	4013      	ands	r3, r2
 8001db4:	2b20      	cmp	r3, #32
 8001db6:	d140      	bne.n	8001e3a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8001db8:	2117      	movs	r1, #23
 8001dba:	187b      	adds	r3, r7, r1
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d13b      	bne.n	8001e3a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	2204      	movs	r2, #4
 8001dca:	4013      	ands	r3, r2
 8001dcc:	2b04      	cmp	r3, #4
 8001dce:	d106      	bne.n	8001dde <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d002      	beq.n	8001dde <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8001dd8:	187b      	adds	r3, r7, r1
 8001dda:	2200      	movs	r2, #0
 8001ddc:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	2210      	movs	r2, #16
 8001de6:	4013      	ands	r3, r2
 8001de8:	2b10      	cmp	r3, #16
 8001dea:	d123      	bne.n	8001e34 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2210      	movs	r2, #16
 8001df2:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2204      	movs	r2, #4
 8001df8:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2220      	movs	r2, #32
 8001e00:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	685a      	ldr	r2, [r3, #4]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4929      	ldr	r1, [pc, #164]	; (8001eb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8001e0e:	400a      	ands	r2, r1
 8001e10:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2241      	movs	r2, #65	; 0x41
 8001e16:	2120      	movs	r1, #32
 8001e18:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2242      	movs	r2, #66	; 0x42
 8001e1e:	2100      	movs	r1, #0
 8001e20:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2240      	movs	r2, #64	; 0x40
 8001e26:	2100      	movs	r1, #0
 8001e28:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8001e2a:	2317      	movs	r3, #23
 8001e2c:	18fb      	adds	r3, r7, r3
 8001e2e:	2201      	movs	r2, #1
 8001e30:	701a      	strb	r2, [r3, #0]
 8001e32:	e002      	b.n	8001e3a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2200      	movs	r2, #0
 8001e38:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8001e3a:	f7ff f96b 	bl	8001114 <HAL_GetTick>
 8001e3e:	0002      	movs	r2, r0
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	68ba      	ldr	r2, [r7, #8]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d302      	bcc.n	8001e50 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d11c      	bne.n	8001e8a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8001e50:	2017      	movs	r0, #23
 8001e52:	183b      	adds	r3, r7, r0
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d117      	bne.n	8001e8a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	2204      	movs	r2, #4
 8001e62:	4013      	ands	r3, r2
 8001e64:	2b04      	cmp	r3, #4
 8001e66:	d010      	beq.n	8001e8a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6c:	2220      	movs	r2, #32
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2241      	movs	r2, #65	; 0x41
 8001e78:	2120      	movs	r1, #32
 8001e7a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2240      	movs	r2, #64	; 0x40
 8001e80:	2100      	movs	r1, #0
 8001e82:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8001e84:	183b      	adds	r3, r7, r0
 8001e86:	2201      	movs	r2, #1
 8001e88:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	2204      	movs	r2, #4
 8001e92:	4013      	ands	r3, r2
 8001e94:	2b04      	cmp	r3, #4
 8001e96:	d005      	beq.n	8001ea4 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8001e98:	2317      	movs	r3, #23
 8001e9a:	18fb      	adds	r3, r7, r3
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d100      	bne.n	8001ea4 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8001ea2:	e776      	b.n	8001d92 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8001ea4:	2317      	movs	r3, #23
 8001ea6:	18fb      	adds	r3, r7, r3
 8001ea8:	781b      	ldrb	r3, [r3, #0]
}
 8001eaa:	0018      	movs	r0, r3
 8001eac:	46bd      	mov	sp, r7
 8001eae:	b006      	add	sp, #24
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	46c0      	nop			; (mov r8, r8)
 8001eb4:	fe00e800 	.word	0xfe00e800

08001eb8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001eb8:	b590      	push	{r4, r7, lr}
 8001eba:	b08b      	sub	sp, #44	; 0x2c
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ec4:	2327      	movs	r3, #39	; 0x27
 8001ec6:	18fb      	adds	r3, r7, r3
 8001ec8:	2200      	movs	r2, #0
 8001eca:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	2210      	movs	r2, #16
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	d100      	bne.n	8001ee6 <I2C_IsErrorOccurred+0x2e>
 8001ee4:	e082      	b.n	8001fec <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2210      	movs	r2, #16
 8001eec:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001eee:	e060      	b.n	8001fb2 <I2C_IsErrorOccurred+0xfa>
 8001ef0:	2427      	movs	r4, #39	; 0x27
 8001ef2:	193b      	adds	r3, r7, r4
 8001ef4:	193a      	adds	r2, r7, r4
 8001ef6:	7812      	ldrb	r2, [r2, #0]
 8001ef8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	3301      	adds	r3, #1
 8001efe:	d058      	beq.n	8001fb2 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001f00:	f7ff f908 	bl	8001114 <HAL_GetTick>
 8001f04:	0002      	movs	r2, r0
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	68ba      	ldr	r2, [r7, #8]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d306      	bcc.n	8001f1e <I2C_IsErrorOccurred+0x66>
 8001f10:	193b      	adds	r3, r7, r4
 8001f12:	193a      	adds	r2, r7, r4
 8001f14:	7812      	ldrb	r2, [r2, #0]
 8001f16:	701a      	strb	r2, [r3, #0]
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d149      	bne.n	8001fb2 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	2380      	movs	r3, #128	; 0x80
 8001f26:	01db      	lsls	r3, r3, #7
 8001f28:	4013      	ands	r3, r2
 8001f2a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001f2c:	2013      	movs	r0, #19
 8001f2e:	183b      	adds	r3, r7, r0
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	2142      	movs	r1, #66	; 0x42
 8001f34:	5c52      	ldrb	r2, [r2, r1]
 8001f36:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	699a      	ldr	r2, [r3, #24]
 8001f3e:	2380      	movs	r3, #128	; 0x80
 8001f40:	021b      	lsls	r3, r3, #8
 8001f42:	401a      	ands	r2, r3
 8001f44:	2380      	movs	r3, #128	; 0x80
 8001f46:	021b      	lsls	r3, r3, #8
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d126      	bne.n	8001f9a <I2C_IsErrorOccurred+0xe2>
 8001f4c:	697a      	ldr	r2, [r7, #20]
 8001f4e:	2380      	movs	r3, #128	; 0x80
 8001f50:	01db      	lsls	r3, r3, #7
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d021      	beq.n	8001f9a <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8001f56:	183b      	adds	r3, r7, r0
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	2b20      	cmp	r3, #32
 8001f5c:	d01d      	beq.n	8001f9a <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	685a      	ldr	r2, [r3, #4]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2180      	movs	r1, #128	; 0x80
 8001f6a:	01c9      	lsls	r1, r1, #7
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001f70:	f7ff f8d0 	bl	8001114 <HAL_GetTick>
 8001f74:	0003      	movs	r3, r0
 8001f76:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f78:	e00f      	b.n	8001f9a <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001f7a:	f7ff f8cb 	bl	8001114 <HAL_GetTick>
 8001f7e:	0002      	movs	r2, r0
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b19      	cmp	r3, #25
 8001f86:	d908      	bls.n	8001f9a <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001f88:	6a3b      	ldr	r3, [r7, #32]
 8001f8a:	2220      	movs	r2, #32
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001f90:	2327      	movs	r3, #39	; 0x27
 8001f92:	18fb      	adds	r3, r7, r3
 8001f94:	2201      	movs	r2, #1
 8001f96:	701a      	strb	r2, [r3, #0]

              break;
 8001f98:	e00b      	b.n	8001fb2 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	2220      	movs	r2, #32
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	2127      	movs	r1, #39	; 0x27
 8001fa6:	187a      	adds	r2, r7, r1
 8001fa8:	1879      	adds	r1, r7, r1
 8001faa:	7809      	ldrb	r1, [r1, #0]
 8001fac:	7011      	strb	r1, [r2, #0]
 8001fae:	2b20      	cmp	r3, #32
 8001fb0:	d1e3      	bne.n	8001f7a <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	2220      	movs	r2, #32
 8001fba:	4013      	ands	r3, r2
 8001fbc:	2b20      	cmp	r3, #32
 8001fbe:	d004      	beq.n	8001fca <I2C_IsErrorOccurred+0x112>
 8001fc0:	2327      	movs	r3, #39	; 0x27
 8001fc2:	18fb      	adds	r3, r7, r3
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d092      	beq.n	8001ef0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001fca:	2327      	movs	r3, #39	; 0x27
 8001fcc:	18fb      	adds	r3, r7, r3
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d103      	bne.n	8001fdc <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2220      	movs	r2, #32
 8001fda:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001fdc:	6a3b      	ldr	r3, [r7, #32]
 8001fde:	2204      	movs	r2, #4
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001fe4:	2327      	movs	r3, #39	; 0x27
 8001fe6:	18fb      	adds	r3, r7, r3
 8001fe8:	2201      	movs	r2, #1
 8001fea:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	2380      	movs	r3, #128	; 0x80
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	d00c      	beq.n	8002018 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001ffe:	6a3b      	ldr	r3, [r7, #32]
 8002000:	2201      	movs	r2, #1
 8002002:	4313      	orrs	r3, r2
 8002004:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2280      	movs	r2, #128	; 0x80
 800200c:	0052      	lsls	r2, r2, #1
 800200e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002010:	2327      	movs	r3, #39	; 0x27
 8002012:	18fb      	adds	r3, r7, r3
 8002014:	2201      	movs	r2, #1
 8002016:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	2380      	movs	r3, #128	; 0x80
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	4013      	ands	r3, r2
 8002020:	d00c      	beq.n	800203c <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002022:	6a3b      	ldr	r3, [r7, #32]
 8002024:	2208      	movs	r2, #8
 8002026:	4313      	orrs	r3, r2
 8002028:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2280      	movs	r2, #128	; 0x80
 8002030:	00d2      	lsls	r2, r2, #3
 8002032:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002034:	2327      	movs	r3, #39	; 0x27
 8002036:	18fb      	adds	r3, r7, r3
 8002038:	2201      	movs	r2, #1
 800203a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	2380      	movs	r3, #128	; 0x80
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	4013      	ands	r3, r2
 8002044:	d00c      	beq.n	8002060 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002046:	6a3b      	ldr	r3, [r7, #32]
 8002048:	2202      	movs	r2, #2
 800204a:	4313      	orrs	r3, r2
 800204c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2280      	movs	r2, #128	; 0x80
 8002054:	0092      	lsls	r2, r2, #2
 8002056:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002058:	2327      	movs	r3, #39	; 0x27
 800205a:	18fb      	adds	r3, r7, r3
 800205c:	2201      	movs	r2, #1
 800205e:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002060:	2327      	movs	r3, #39	; 0x27
 8002062:	18fb      	adds	r3, r7, r3
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d01d      	beq.n	80020a6 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	0018      	movs	r0, r3
 800206e:	f7ff fd81 	bl	8001b74 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	685a      	ldr	r2, [r3, #4]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	490d      	ldr	r1, [pc, #52]	; (80020b4 <I2C_IsErrorOccurred+0x1fc>)
 800207e:	400a      	ands	r2, r1
 8002080:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002086:	6a3b      	ldr	r3, [r7, #32]
 8002088:	431a      	orrs	r2, r3
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2241      	movs	r2, #65	; 0x41
 8002092:	2120      	movs	r1, #32
 8002094:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2242      	movs	r2, #66	; 0x42
 800209a:	2100      	movs	r1, #0
 800209c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2240      	movs	r2, #64	; 0x40
 80020a2:	2100      	movs	r1, #0
 80020a4:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80020a6:	2327      	movs	r3, #39	; 0x27
 80020a8:	18fb      	adds	r3, r7, r3
 80020aa:	781b      	ldrb	r3, [r3, #0]
}
 80020ac:	0018      	movs	r0, r3
 80020ae:	46bd      	mov	sp, r7
 80020b0:	b00b      	add	sp, #44	; 0x2c
 80020b2:	bd90      	pop	{r4, r7, pc}
 80020b4:	fe00e800 	.word	0xfe00e800

080020b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80020b8:	b590      	push	{r4, r7, lr}
 80020ba:	b087      	sub	sp, #28
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	0008      	movs	r0, r1
 80020c2:	0011      	movs	r1, r2
 80020c4:	607b      	str	r3, [r7, #4]
 80020c6:	240a      	movs	r4, #10
 80020c8:	193b      	adds	r3, r7, r4
 80020ca:	1c02      	adds	r2, r0, #0
 80020cc:	801a      	strh	r2, [r3, #0]
 80020ce:	2009      	movs	r0, #9
 80020d0:	183b      	adds	r3, r7, r0
 80020d2:	1c0a      	adds	r2, r1, #0
 80020d4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020d6:	193b      	adds	r3, r7, r4
 80020d8:	881b      	ldrh	r3, [r3, #0]
 80020da:	059b      	lsls	r3, r3, #22
 80020dc:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80020de:	183b      	adds	r3, r7, r0
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	0419      	lsls	r1, r3, #16
 80020e4:	23ff      	movs	r3, #255	; 0xff
 80020e6:	041b      	lsls	r3, r3, #16
 80020e8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020ea:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020f2:	4313      	orrs	r3, r2
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	085b      	lsrs	r3, r3, #1
 80020f8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002102:	0d51      	lsrs	r1, r2, #21
 8002104:	2280      	movs	r2, #128	; 0x80
 8002106:	00d2      	lsls	r2, r2, #3
 8002108:	400a      	ands	r2, r1
 800210a:	4907      	ldr	r1, [pc, #28]	; (8002128 <I2C_TransferConfig+0x70>)
 800210c:	430a      	orrs	r2, r1
 800210e:	43d2      	mvns	r2, r2
 8002110:	401a      	ands	r2, r3
 8002112:	0011      	movs	r1, r2
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	697a      	ldr	r2, [r7, #20]
 800211a:	430a      	orrs	r2, r1
 800211c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800211e:	46c0      	nop			; (mov r8, r8)
 8002120:	46bd      	mov	sp, r7
 8002122:	b007      	add	sp, #28
 8002124:	bd90      	pop	{r4, r7, pc}
 8002126:	46c0      	nop			; (mov r8, r8)
 8002128:	03ff63ff 	.word	0x03ff63ff

0800212c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2241      	movs	r2, #65	; 0x41
 800213a:	5c9b      	ldrb	r3, [r3, r2]
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b20      	cmp	r3, #32
 8002140:	d138      	bne.n	80021b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2240      	movs	r2, #64	; 0x40
 8002146:	5c9b      	ldrb	r3, [r3, r2]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d101      	bne.n	8002150 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800214c:	2302      	movs	r3, #2
 800214e:	e032      	b.n	80021b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2240      	movs	r2, #64	; 0x40
 8002154:	2101      	movs	r1, #1
 8002156:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2241      	movs	r2, #65	; 0x41
 800215c:	2124      	movs	r1, #36	; 0x24
 800215e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2101      	movs	r1, #1
 800216c:	438a      	bics	r2, r1
 800216e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4911      	ldr	r1, [pc, #68]	; (80021c0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800217c:	400a      	ands	r2, r1
 800217e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	6819      	ldr	r1, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	430a      	orrs	r2, r1
 800218e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2101      	movs	r1, #1
 800219c:	430a      	orrs	r2, r1
 800219e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2241      	movs	r2, #65	; 0x41
 80021a4:	2120      	movs	r1, #32
 80021a6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2240      	movs	r2, #64	; 0x40
 80021ac:	2100      	movs	r1, #0
 80021ae:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80021b0:	2300      	movs	r3, #0
 80021b2:	e000      	b.n	80021b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80021b4:	2302      	movs	r3, #2
  }
}
 80021b6:	0018      	movs	r0, r3
 80021b8:	46bd      	mov	sp, r7
 80021ba:	b002      	add	sp, #8
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	46c0      	nop			; (mov r8, r8)
 80021c0:	ffffefff 	.word	0xffffefff

080021c4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2241      	movs	r2, #65	; 0x41
 80021d2:	5c9b      	ldrb	r3, [r3, r2]
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b20      	cmp	r3, #32
 80021d8:	d139      	bne.n	800224e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2240      	movs	r2, #64	; 0x40
 80021de:	5c9b      	ldrb	r3, [r3, r2]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d101      	bne.n	80021e8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80021e4:	2302      	movs	r3, #2
 80021e6:	e033      	b.n	8002250 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2240      	movs	r2, #64	; 0x40
 80021ec:	2101      	movs	r1, #1
 80021ee:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2241      	movs	r2, #65	; 0x41
 80021f4:	2124      	movs	r1, #36	; 0x24
 80021f6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2101      	movs	r1, #1
 8002204:	438a      	bics	r2, r1
 8002206:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	4a11      	ldr	r2, [pc, #68]	; (8002258 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002214:	4013      	ands	r3, r2
 8002216:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	021b      	lsls	r3, r3, #8
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	4313      	orrs	r3, r2
 8002220:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2101      	movs	r1, #1
 8002236:	430a      	orrs	r2, r1
 8002238:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2241      	movs	r2, #65	; 0x41
 800223e:	2120      	movs	r1, #32
 8002240:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2240      	movs	r2, #64	; 0x40
 8002246:	2100      	movs	r1, #0
 8002248:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800224a:	2300      	movs	r3, #0
 800224c:	e000      	b.n	8002250 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800224e:	2302      	movs	r3, #2
  }
}
 8002250:	0018      	movs	r0, r3
 8002252:	46bd      	mov	sp, r7
 8002254:	b004      	add	sp, #16
 8002256:	bd80      	pop	{r7, pc}
 8002258:	fffff0ff 	.word	0xfffff0ff

0800225c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800225c:	b5b0      	push	{r4, r5, r7, lr}
 800225e:	b08a      	sub	sp, #40	; 0x28
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d102      	bne.n	8002270 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	f000 fb5a 	bl	8002924 <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002270:	4bce      	ldr	r3, [pc, #824]	; (80025ac <HAL_RCC_OscConfig+0x350>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	220c      	movs	r2, #12
 8002276:	4013      	ands	r3, r2
 8002278:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800227a:	4bcc      	ldr	r3, [pc, #816]	; (80025ac <HAL_RCC_OscConfig+0x350>)
 800227c:	68da      	ldr	r2, [r3, #12]
 800227e:	2380      	movs	r3, #128	; 0x80
 8002280:	025b      	lsls	r3, r3, #9
 8002282:	4013      	ands	r3, r2
 8002284:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2201      	movs	r2, #1
 800228c:	4013      	ands	r3, r2
 800228e:	d100      	bne.n	8002292 <HAL_RCC_OscConfig+0x36>
 8002290:	e07c      	b.n	800238c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002292:	6a3b      	ldr	r3, [r7, #32]
 8002294:	2b08      	cmp	r3, #8
 8002296:	d007      	beq.n	80022a8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002298:	6a3b      	ldr	r3, [r7, #32]
 800229a:	2b0c      	cmp	r3, #12
 800229c:	d111      	bne.n	80022c2 <HAL_RCC_OscConfig+0x66>
 800229e:	69fa      	ldr	r2, [r7, #28]
 80022a0:	2380      	movs	r3, #128	; 0x80
 80022a2:	025b      	lsls	r3, r3, #9
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d10c      	bne.n	80022c2 <HAL_RCC_OscConfig+0x66>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022a8:	4bc0      	ldr	r3, [pc, #768]	; (80025ac <HAL_RCC_OscConfig+0x350>)
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	2380      	movs	r3, #128	; 0x80
 80022ae:	029b      	lsls	r3, r3, #10
 80022b0:	4013      	ands	r3, r2
 80022b2:	d100      	bne.n	80022b6 <HAL_RCC_OscConfig+0x5a>
 80022b4:	e069      	b.n	800238a <HAL_RCC_OscConfig+0x12e>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d165      	bne.n	800238a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e330      	b.n	8002924 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685a      	ldr	r2, [r3, #4]
 80022c6:	2380      	movs	r3, #128	; 0x80
 80022c8:	025b      	lsls	r3, r3, #9
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d107      	bne.n	80022de <HAL_RCC_OscConfig+0x82>
 80022ce:	4bb7      	ldr	r3, [pc, #732]	; (80025ac <HAL_RCC_OscConfig+0x350>)
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	4bb6      	ldr	r3, [pc, #728]	; (80025ac <HAL_RCC_OscConfig+0x350>)
 80022d4:	2180      	movs	r1, #128	; 0x80
 80022d6:	0249      	lsls	r1, r1, #9
 80022d8:	430a      	orrs	r2, r1
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	e027      	b.n	800232e <HAL_RCC_OscConfig+0xd2>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685a      	ldr	r2, [r3, #4]
 80022e2:	23a0      	movs	r3, #160	; 0xa0
 80022e4:	02db      	lsls	r3, r3, #11
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d10e      	bne.n	8002308 <HAL_RCC_OscConfig+0xac>
 80022ea:	4bb0      	ldr	r3, [pc, #704]	; (80025ac <HAL_RCC_OscConfig+0x350>)
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	4baf      	ldr	r3, [pc, #700]	; (80025ac <HAL_RCC_OscConfig+0x350>)
 80022f0:	2180      	movs	r1, #128	; 0x80
 80022f2:	02c9      	lsls	r1, r1, #11
 80022f4:	430a      	orrs	r2, r1
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	4bac      	ldr	r3, [pc, #688]	; (80025ac <HAL_RCC_OscConfig+0x350>)
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	4bab      	ldr	r3, [pc, #684]	; (80025ac <HAL_RCC_OscConfig+0x350>)
 80022fe:	2180      	movs	r1, #128	; 0x80
 8002300:	0249      	lsls	r1, r1, #9
 8002302:	430a      	orrs	r2, r1
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	e012      	b.n	800232e <HAL_RCC_OscConfig+0xd2>
 8002308:	4ba8      	ldr	r3, [pc, #672]	; (80025ac <HAL_RCC_OscConfig+0x350>)
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	4ba7      	ldr	r3, [pc, #668]	; (80025ac <HAL_RCC_OscConfig+0x350>)
 800230e:	49a8      	ldr	r1, [pc, #672]	; (80025b0 <HAL_RCC_OscConfig+0x354>)
 8002310:	400a      	ands	r2, r1
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	4ba5      	ldr	r3, [pc, #660]	; (80025ac <HAL_RCC_OscConfig+0x350>)
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	2380      	movs	r3, #128	; 0x80
 800231a:	025b      	lsls	r3, r3, #9
 800231c:	4013      	ands	r3, r2
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	4ba2      	ldr	r3, [pc, #648]	; (80025ac <HAL_RCC_OscConfig+0x350>)
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	4ba1      	ldr	r3, [pc, #644]	; (80025ac <HAL_RCC_OscConfig+0x350>)
 8002328:	49a2      	ldr	r1, [pc, #648]	; (80025b4 <HAL_RCC_OscConfig+0x358>)
 800232a:	400a      	ands	r2, r1
 800232c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d014      	beq.n	8002360 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002336:	f7fe feed 	bl	8001114 <HAL_GetTick>
 800233a:	0003      	movs	r3, r0
 800233c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0xf6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002340:	f7fe fee8 	bl	8001114 <HAL_GetTick>
 8002344:	0002      	movs	r2, r0
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b64      	cmp	r3, #100	; 0x64
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e2e8      	b.n	8002924 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002352:	4b96      	ldr	r3, [pc, #600]	; (80025ac <HAL_RCC_OscConfig+0x350>)
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	2380      	movs	r3, #128	; 0x80
 8002358:	029b      	lsls	r3, r3, #10
 800235a:	4013      	ands	r3, r2
 800235c:	d0f0      	beq.n	8002340 <HAL_RCC_OscConfig+0xe4>
 800235e:	e015      	b.n	800238c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002360:	f7fe fed8 	bl	8001114 <HAL_GetTick>
 8002364:	0003      	movs	r3, r0
 8002366:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002368:	e008      	b.n	800237c <HAL_RCC_OscConfig+0x120>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800236a:	f7fe fed3 	bl	8001114 <HAL_GetTick>
 800236e:	0002      	movs	r2, r0
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b64      	cmp	r3, #100	; 0x64
 8002376:	d901      	bls.n	800237c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e2d3      	b.n	8002924 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800237c:	4b8b      	ldr	r3, [pc, #556]	; (80025ac <HAL_RCC_OscConfig+0x350>)
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	2380      	movs	r3, #128	; 0x80
 8002382:	029b      	lsls	r3, r3, #10
 8002384:	4013      	ands	r3, r2
 8002386:	d1f0      	bne.n	800236a <HAL_RCC_OscConfig+0x10e>
 8002388:	e000      	b.n	800238c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800238a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2202      	movs	r2, #2
 8002392:	4013      	ands	r3, r2
 8002394:	d100      	bne.n	8002398 <HAL_RCC_OscConfig+0x13c>
 8002396:	e08b      	b.n	80024b0 <HAL_RCC_OscConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800239e:	6a3b      	ldr	r3, [r7, #32]
 80023a0:	2b04      	cmp	r3, #4
 80023a2:	d005      	beq.n	80023b0 <HAL_RCC_OscConfig+0x154>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80023a4:	6a3b      	ldr	r3, [r7, #32]
 80023a6:	2b0c      	cmp	r3, #12
 80023a8:	d13e      	bne.n	8002428 <HAL_RCC_OscConfig+0x1cc>
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d13b      	bne.n	8002428 <HAL_RCC_OscConfig+0x1cc>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80023b0:	4b7e      	ldr	r3, [pc, #504]	; (80025ac <HAL_RCC_OscConfig+0x350>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2204      	movs	r2, #4
 80023b6:	4013      	ands	r3, r2
 80023b8:	d004      	beq.n	80023c4 <HAL_RCC_OscConfig+0x168>
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e2af      	b.n	8002924 <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c4:	4b79      	ldr	r3, [pc, #484]	; (80025ac <HAL_RCC_OscConfig+0x350>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	4a7b      	ldr	r2, [pc, #492]	; (80025b8 <HAL_RCC_OscConfig+0x35c>)
 80023ca:	4013      	ands	r3, r2
 80023cc:	0019      	movs	r1, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	021a      	lsls	r2, r3, #8
 80023d4:	4b75      	ldr	r3, [pc, #468]	; (80025ac <HAL_RCC_OscConfig+0x350>)
 80023d6:	430a      	orrs	r2, r1
 80023d8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80023da:	4b74      	ldr	r3, [pc, #464]	; (80025ac <HAL_RCC_OscConfig+0x350>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2209      	movs	r2, #9
 80023e0:	4393      	bics	r3, r2
 80023e2:	0019      	movs	r1, r3
 80023e4:	4b71      	ldr	r3, [pc, #452]	; (80025ac <HAL_RCC_OscConfig+0x350>)
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	430a      	orrs	r2, r1
 80023ea:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023ec:	f000 fbe8 	bl	8002bc0 <HAL_RCC_GetSysClockFreq>
 80023f0:	0001      	movs	r1, r0
 80023f2:	4b6e      	ldr	r3, [pc, #440]	; (80025ac <HAL_RCC_OscConfig+0x350>)
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	091b      	lsrs	r3, r3, #4
 80023f8:	220f      	movs	r2, #15
 80023fa:	4013      	ands	r3, r2
 80023fc:	4a6f      	ldr	r2, [pc, #444]	; (80025bc <HAL_RCC_OscConfig+0x360>)
 80023fe:	5cd3      	ldrb	r3, [r2, r3]
 8002400:	000a      	movs	r2, r1
 8002402:	40da      	lsrs	r2, r3
 8002404:	4b6e      	ldr	r3, [pc, #440]	; (80025c0 <HAL_RCC_OscConfig+0x364>)
 8002406:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002408:	4b6e      	ldr	r3, [pc, #440]	; (80025c4 <HAL_RCC_OscConfig+0x368>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2513      	movs	r5, #19
 800240e:	197c      	adds	r4, r7, r5
 8002410:	0018      	movs	r0, r3
 8002412:	f7fe fe39 	bl	8001088 <HAL_InitTick>
 8002416:	0003      	movs	r3, r0
 8002418:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800241a:	197b      	adds	r3, r7, r5
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d046      	beq.n	80024b0 <HAL_RCC_OscConfig+0x254>
      {
        return status;
 8002422:	197b      	adds	r3, r7, r5
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	e27d      	b.n	8002924 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d027      	beq.n	800247e <HAL_RCC_OscConfig+0x222>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800242e:	4b5f      	ldr	r3, [pc, #380]	; (80025ac <HAL_RCC_OscConfig+0x350>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2209      	movs	r2, #9
 8002434:	4393      	bics	r3, r2
 8002436:	0019      	movs	r1, r3
 8002438:	4b5c      	ldr	r3, [pc, #368]	; (80025ac <HAL_RCC_OscConfig+0x350>)
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	430a      	orrs	r2, r1
 800243e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002440:	f7fe fe68 	bl	8001114 <HAL_GetTick>
 8002444:	0003      	movs	r3, r0
 8002446:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002448:	e008      	b.n	800245c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800244a:	f7fe fe63 	bl	8001114 <HAL_GetTick>
 800244e:	0002      	movs	r2, r0
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d901      	bls.n	800245c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e263      	b.n	8002924 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800245c:	4b53      	ldr	r3, [pc, #332]	; (80025ac <HAL_RCC_OscConfig+0x350>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2204      	movs	r2, #4
 8002462:	4013      	ands	r3, r2
 8002464:	d0f1      	beq.n	800244a <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002466:	4b51      	ldr	r3, [pc, #324]	; (80025ac <HAL_RCC_OscConfig+0x350>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	4a53      	ldr	r2, [pc, #332]	; (80025b8 <HAL_RCC_OscConfig+0x35c>)
 800246c:	4013      	ands	r3, r2
 800246e:	0019      	movs	r1, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	021a      	lsls	r2, r3, #8
 8002476:	4b4d      	ldr	r3, [pc, #308]	; (80025ac <HAL_RCC_OscConfig+0x350>)
 8002478:	430a      	orrs	r2, r1
 800247a:	605a      	str	r2, [r3, #4]
 800247c:	e018      	b.n	80024b0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800247e:	4b4b      	ldr	r3, [pc, #300]	; (80025ac <HAL_RCC_OscConfig+0x350>)
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	4b4a      	ldr	r3, [pc, #296]	; (80025ac <HAL_RCC_OscConfig+0x350>)
 8002484:	2101      	movs	r1, #1
 8002486:	438a      	bics	r2, r1
 8002488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800248a:	f7fe fe43 	bl	8001114 <HAL_GetTick>
 800248e:	0003      	movs	r3, r0
 8002490:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0x24a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002494:	f7fe fe3e 	bl	8001114 <HAL_GetTick>
 8002498:	0002      	movs	r2, r0
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e23e      	b.n	8002924 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80024a6:	4b41      	ldr	r3, [pc, #260]	; (80025ac <HAL_RCC_OscConfig+0x350>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2204      	movs	r2, #4
 80024ac:	4013      	ands	r3, r2
 80024ae:	d1f1      	bne.n	8002494 <HAL_RCC_OscConfig+0x238>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2210      	movs	r2, #16
 80024b6:	4013      	ands	r3, r2
 80024b8:	d100      	bne.n	80024bc <HAL_RCC_OscConfig+0x260>
 80024ba:	e0a1      	b.n	8002600 <HAL_RCC_OscConfig+0x3a4>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024bc:	6a3b      	ldr	r3, [r7, #32]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d140      	bne.n	8002544 <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024c2:	4b3a      	ldr	r3, [pc, #232]	; (80025ac <HAL_RCC_OscConfig+0x350>)
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	2380      	movs	r3, #128	; 0x80
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4013      	ands	r3, r2
 80024cc:	d005      	beq.n	80024da <HAL_RCC_OscConfig+0x27e>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_RCC_OscConfig+0x27e>
      {
        return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e224      	b.n	8002924 <HAL_RCC_OscConfig+0x6c8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024da:	4b34      	ldr	r3, [pc, #208]	; (80025ac <HAL_RCC_OscConfig+0x350>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	4a3a      	ldr	r2, [pc, #232]	; (80025c8 <HAL_RCC_OscConfig+0x36c>)
 80024e0:	4013      	ands	r3, r2
 80024e2:	0019      	movs	r1, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a1a      	ldr	r2, [r3, #32]
 80024e8:	4b30      	ldr	r3, [pc, #192]	; (80025ac <HAL_RCC_OscConfig+0x350>)
 80024ea:	430a      	orrs	r2, r1
 80024ec:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024ee:	4b2f      	ldr	r3, [pc, #188]	; (80025ac <HAL_RCC_OscConfig+0x350>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	021b      	lsls	r3, r3, #8
 80024f4:	0a19      	lsrs	r1, r3, #8
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	69db      	ldr	r3, [r3, #28]
 80024fa:	061a      	lsls	r2, r3, #24
 80024fc:	4b2b      	ldr	r3, [pc, #172]	; (80025ac <HAL_RCC_OscConfig+0x350>)
 80024fe:	430a      	orrs	r2, r1
 8002500:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	0b5b      	lsrs	r3, r3, #13
 8002508:	3301      	adds	r3, #1
 800250a:	2280      	movs	r2, #128	; 0x80
 800250c:	0212      	lsls	r2, r2, #8
 800250e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002510:	4b26      	ldr	r3, [pc, #152]	; (80025ac <HAL_RCC_OscConfig+0x350>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	091b      	lsrs	r3, r3, #4
 8002516:	210f      	movs	r1, #15
 8002518:	400b      	ands	r3, r1
 800251a:	4928      	ldr	r1, [pc, #160]	; (80025bc <HAL_RCC_OscConfig+0x360>)
 800251c:	5ccb      	ldrb	r3, [r1, r3]
 800251e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002520:	4b27      	ldr	r3, [pc, #156]	; (80025c0 <HAL_RCC_OscConfig+0x364>)
 8002522:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002524:	4b27      	ldr	r3, [pc, #156]	; (80025c4 <HAL_RCC_OscConfig+0x368>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2513      	movs	r5, #19
 800252a:	197c      	adds	r4, r7, r5
 800252c:	0018      	movs	r0, r3
 800252e:	f7fe fdab 	bl	8001088 <HAL_InitTick>
 8002532:	0003      	movs	r3, r0
 8002534:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002536:	197b      	adds	r3, r7, r5
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d060      	beq.n	8002600 <HAL_RCC_OscConfig+0x3a4>
        {
          return status;
 800253e:	197b      	adds	r3, r7, r5
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	e1ef      	b.n	8002924 <HAL_RCC_OscConfig+0x6c8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d03f      	beq.n	80025cc <HAL_RCC_OscConfig+0x370>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800254c:	4b17      	ldr	r3, [pc, #92]	; (80025ac <HAL_RCC_OscConfig+0x350>)
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	4b16      	ldr	r3, [pc, #88]	; (80025ac <HAL_RCC_OscConfig+0x350>)
 8002552:	2180      	movs	r1, #128	; 0x80
 8002554:	0049      	lsls	r1, r1, #1
 8002556:	430a      	orrs	r2, r1
 8002558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255a:	f7fe fddb 	bl	8001114 <HAL_GetTick>
 800255e:	0003      	movs	r3, r0
 8002560:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002564:	f7fe fdd6 	bl	8001114 <HAL_GetTick>
 8002568:	0002      	movs	r2, r0
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e1d6      	b.n	8002924 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002576:	4b0d      	ldr	r3, [pc, #52]	; (80025ac <HAL_RCC_OscConfig+0x350>)
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	2380      	movs	r3, #128	; 0x80
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	4013      	ands	r3, r2
 8002580:	d0f0      	beq.n	8002564 <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002582:	4b0a      	ldr	r3, [pc, #40]	; (80025ac <HAL_RCC_OscConfig+0x350>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	4a10      	ldr	r2, [pc, #64]	; (80025c8 <HAL_RCC_OscConfig+0x36c>)
 8002588:	4013      	ands	r3, r2
 800258a:	0019      	movs	r1, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a1a      	ldr	r2, [r3, #32]
 8002590:	4b06      	ldr	r3, [pc, #24]	; (80025ac <HAL_RCC_OscConfig+0x350>)
 8002592:	430a      	orrs	r2, r1
 8002594:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002596:	4b05      	ldr	r3, [pc, #20]	; (80025ac <HAL_RCC_OscConfig+0x350>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	021b      	lsls	r3, r3, #8
 800259c:	0a19      	lsrs	r1, r3, #8
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	061a      	lsls	r2, r3, #24
 80025a4:	4b01      	ldr	r3, [pc, #4]	; (80025ac <HAL_RCC_OscConfig+0x350>)
 80025a6:	430a      	orrs	r2, r1
 80025a8:	605a      	str	r2, [r3, #4]
 80025aa:	e029      	b.n	8002600 <HAL_RCC_OscConfig+0x3a4>
 80025ac:	40021000 	.word	0x40021000
 80025b0:	fffeffff 	.word	0xfffeffff
 80025b4:	fffbffff 	.word	0xfffbffff
 80025b8:	ffffe0ff 	.word	0xffffe0ff
 80025bc:	08003038 	.word	0x08003038
 80025c0:	20000000 	.word	0x20000000
 80025c4:	20000004 	.word	0x20000004
 80025c8:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80025cc:	4bbe      	ldr	r3, [pc, #760]	; (80028c8 <HAL_RCC_OscConfig+0x66c>)
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	4bbd      	ldr	r3, [pc, #756]	; (80028c8 <HAL_RCC_OscConfig+0x66c>)
 80025d2:	49be      	ldr	r1, [pc, #760]	; (80028cc <HAL_RCC_OscConfig+0x670>)
 80025d4:	400a      	ands	r2, r1
 80025d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d8:	f7fe fd9c 	bl	8001114 <HAL_GetTick>
 80025dc:	0003      	movs	r3, r0
 80025de:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80025e0:	e008      	b.n	80025f4 <HAL_RCC_OscConfig+0x398>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025e2:	f7fe fd97 	bl	8001114 <HAL_GetTick>
 80025e6:	0002      	movs	r2, r0
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x398>
          {
            return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e197      	b.n	8002924 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80025f4:	4bb4      	ldr	r3, [pc, #720]	; (80028c8 <HAL_RCC_OscConfig+0x66c>)
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	2380      	movs	r3, #128	; 0x80
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	4013      	ands	r3, r2
 80025fe:	d1f0      	bne.n	80025e2 <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2208      	movs	r2, #8
 8002606:	4013      	ands	r3, r2
 8002608:	d036      	beq.n	8002678 <HAL_RCC_OscConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d019      	beq.n	8002646 <HAL_RCC_OscConfig+0x3ea>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002612:	4bad      	ldr	r3, [pc, #692]	; (80028c8 <HAL_RCC_OscConfig+0x66c>)
 8002614:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002616:	4bac      	ldr	r3, [pc, #688]	; (80028c8 <HAL_RCC_OscConfig+0x66c>)
 8002618:	2101      	movs	r1, #1
 800261a:	430a      	orrs	r2, r1
 800261c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800261e:	f7fe fd79 	bl	8001114 <HAL_GetTick>
 8002622:	0003      	movs	r3, r0
 8002624:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x3de>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002628:	f7fe fd74 	bl	8001114 <HAL_GetTick>
 800262c:	0002      	movs	r2, r0
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x3de>
        {
          return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e174      	b.n	8002924 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800263a:	4ba3      	ldr	r3, [pc, #652]	; (80028c8 <HAL_RCC_OscConfig+0x66c>)
 800263c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800263e:	2202      	movs	r2, #2
 8002640:	4013      	ands	r3, r2
 8002642:	d0f1      	beq.n	8002628 <HAL_RCC_OscConfig+0x3cc>
 8002644:	e018      	b.n	8002678 <HAL_RCC_OscConfig+0x41c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002646:	4ba0      	ldr	r3, [pc, #640]	; (80028c8 <HAL_RCC_OscConfig+0x66c>)
 8002648:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800264a:	4b9f      	ldr	r3, [pc, #636]	; (80028c8 <HAL_RCC_OscConfig+0x66c>)
 800264c:	2101      	movs	r1, #1
 800264e:	438a      	bics	r2, r1
 8002650:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002652:	f7fe fd5f 	bl	8001114 <HAL_GetTick>
 8002656:	0003      	movs	r3, r0
 8002658:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0x412>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800265c:	f7fe fd5a 	bl	8001114 <HAL_GetTick>
 8002660:	0002      	movs	r2, r0
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e15a      	b.n	8002924 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800266e:	4b96      	ldr	r3, [pc, #600]	; (80028c8 <HAL_RCC_OscConfig+0x66c>)
 8002670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002672:	2202      	movs	r2, #2
 8002674:	4013      	ands	r3, r2
 8002676:	d1f1      	bne.n	800265c <HAL_RCC_OscConfig+0x400>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2204      	movs	r2, #4
 800267e:	4013      	ands	r3, r2
 8002680:	d100      	bne.n	8002684 <HAL_RCC_OscConfig+0x428>
 8002682:	e0ae      	b.n	80027e2 <HAL_RCC_OscConfig+0x586>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002684:	2027      	movs	r0, #39	; 0x27
 8002686:	183b      	adds	r3, r7, r0
 8002688:	2200      	movs	r2, #0
 800268a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800268c:	4b8e      	ldr	r3, [pc, #568]	; (80028c8 <HAL_RCC_OscConfig+0x66c>)
 800268e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002690:	2380      	movs	r3, #128	; 0x80
 8002692:	055b      	lsls	r3, r3, #21
 8002694:	4013      	ands	r3, r2
 8002696:	d109      	bne.n	80026ac <HAL_RCC_OscConfig+0x450>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002698:	4b8b      	ldr	r3, [pc, #556]	; (80028c8 <HAL_RCC_OscConfig+0x66c>)
 800269a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800269c:	4b8a      	ldr	r3, [pc, #552]	; (80028c8 <HAL_RCC_OscConfig+0x66c>)
 800269e:	2180      	movs	r1, #128	; 0x80
 80026a0:	0549      	lsls	r1, r1, #21
 80026a2:	430a      	orrs	r2, r1
 80026a4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80026a6:	183b      	adds	r3, r7, r0
 80026a8:	2201      	movs	r2, #1
 80026aa:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ac:	4b88      	ldr	r3, [pc, #544]	; (80028d0 <HAL_RCC_OscConfig+0x674>)
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	2380      	movs	r3, #128	; 0x80
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	4013      	ands	r3, r2
 80026b6:	d11a      	bne.n	80026ee <HAL_RCC_OscConfig+0x492>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026b8:	4b85      	ldr	r3, [pc, #532]	; (80028d0 <HAL_RCC_OscConfig+0x674>)
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	4b84      	ldr	r3, [pc, #528]	; (80028d0 <HAL_RCC_OscConfig+0x674>)
 80026be:	2180      	movs	r1, #128	; 0x80
 80026c0:	0049      	lsls	r1, r1, #1
 80026c2:	430a      	orrs	r2, r1
 80026c4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026c6:	f7fe fd25 	bl	8001114 <HAL_GetTick>
 80026ca:	0003      	movs	r3, r0
 80026cc:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0x486>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026d0:	f7fe fd20 	bl	8001114 <HAL_GetTick>
 80026d4:	0002      	movs	r2, r0
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b64      	cmp	r3, #100	; 0x64
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x486>
        {
          return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e120      	b.n	8002924 <HAL_RCC_OscConfig+0x6c8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e2:	4b7b      	ldr	r3, [pc, #492]	; (80028d0 <HAL_RCC_OscConfig+0x674>)
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	2380      	movs	r3, #128	; 0x80
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	4013      	ands	r3, r2
 80026ec:	d0f0      	beq.n	80026d0 <HAL_RCC_OscConfig+0x474>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689a      	ldr	r2, [r3, #8]
 80026f2:	2380      	movs	r3, #128	; 0x80
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d107      	bne.n	800270a <HAL_RCC_OscConfig+0x4ae>
 80026fa:	4b73      	ldr	r3, [pc, #460]	; (80028c8 <HAL_RCC_OscConfig+0x66c>)
 80026fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026fe:	4b72      	ldr	r3, [pc, #456]	; (80028c8 <HAL_RCC_OscConfig+0x66c>)
 8002700:	2180      	movs	r1, #128	; 0x80
 8002702:	0049      	lsls	r1, r1, #1
 8002704:	430a      	orrs	r2, r1
 8002706:	651a      	str	r2, [r3, #80]	; 0x50
 8002708:	e031      	b.n	800276e <HAL_RCC_OscConfig+0x512>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10c      	bne.n	800272c <HAL_RCC_OscConfig+0x4d0>
 8002712:	4b6d      	ldr	r3, [pc, #436]	; (80028c8 <HAL_RCC_OscConfig+0x66c>)
 8002714:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002716:	4b6c      	ldr	r3, [pc, #432]	; (80028c8 <HAL_RCC_OscConfig+0x66c>)
 8002718:	496c      	ldr	r1, [pc, #432]	; (80028cc <HAL_RCC_OscConfig+0x670>)
 800271a:	400a      	ands	r2, r1
 800271c:	651a      	str	r2, [r3, #80]	; 0x50
 800271e:	4b6a      	ldr	r3, [pc, #424]	; (80028c8 <HAL_RCC_OscConfig+0x66c>)
 8002720:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002722:	4b69      	ldr	r3, [pc, #420]	; (80028c8 <HAL_RCC_OscConfig+0x66c>)
 8002724:	496b      	ldr	r1, [pc, #428]	; (80028d4 <HAL_RCC_OscConfig+0x678>)
 8002726:	400a      	ands	r2, r1
 8002728:	651a      	str	r2, [r3, #80]	; 0x50
 800272a:	e020      	b.n	800276e <HAL_RCC_OscConfig+0x512>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689a      	ldr	r2, [r3, #8]
 8002730:	23a0      	movs	r3, #160	; 0xa0
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	429a      	cmp	r2, r3
 8002736:	d10e      	bne.n	8002756 <HAL_RCC_OscConfig+0x4fa>
 8002738:	4b63      	ldr	r3, [pc, #396]	; (80028c8 <HAL_RCC_OscConfig+0x66c>)
 800273a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800273c:	4b62      	ldr	r3, [pc, #392]	; (80028c8 <HAL_RCC_OscConfig+0x66c>)
 800273e:	2180      	movs	r1, #128	; 0x80
 8002740:	00c9      	lsls	r1, r1, #3
 8002742:	430a      	orrs	r2, r1
 8002744:	651a      	str	r2, [r3, #80]	; 0x50
 8002746:	4b60      	ldr	r3, [pc, #384]	; (80028c8 <HAL_RCC_OscConfig+0x66c>)
 8002748:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800274a:	4b5f      	ldr	r3, [pc, #380]	; (80028c8 <HAL_RCC_OscConfig+0x66c>)
 800274c:	2180      	movs	r1, #128	; 0x80
 800274e:	0049      	lsls	r1, r1, #1
 8002750:	430a      	orrs	r2, r1
 8002752:	651a      	str	r2, [r3, #80]	; 0x50
 8002754:	e00b      	b.n	800276e <HAL_RCC_OscConfig+0x512>
 8002756:	4b5c      	ldr	r3, [pc, #368]	; (80028c8 <HAL_RCC_OscConfig+0x66c>)
 8002758:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800275a:	4b5b      	ldr	r3, [pc, #364]	; (80028c8 <HAL_RCC_OscConfig+0x66c>)
 800275c:	495b      	ldr	r1, [pc, #364]	; (80028cc <HAL_RCC_OscConfig+0x670>)
 800275e:	400a      	ands	r2, r1
 8002760:	651a      	str	r2, [r3, #80]	; 0x50
 8002762:	4b59      	ldr	r3, [pc, #356]	; (80028c8 <HAL_RCC_OscConfig+0x66c>)
 8002764:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002766:	4b58      	ldr	r3, [pc, #352]	; (80028c8 <HAL_RCC_OscConfig+0x66c>)
 8002768:	495a      	ldr	r1, [pc, #360]	; (80028d4 <HAL_RCC_OscConfig+0x678>)
 800276a:	400a      	ands	r2, r1
 800276c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d015      	beq.n	80027a2 <HAL_RCC_OscConfig+0x546>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002776:	f7fe fccd 	bl	8001114 <HAL_GetTick>
 800277a:	0003      	movs	r3, r0
 800277c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800277e:	e009      	b.n	8002794 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002780:	f7fe fcc8 	bl	8001114 <HAL_GetTick>
 8002784:	0002      	movs	r2, r0
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	4a53      	ldr	r2, [pc, #332]	; (80028d8 <HAL_RCC_OscConfig+0x67c>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d901      	bls.n	8002794 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e0c7      	b.n	8002924 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002794:	4b4c      	ldr	r3, [pc, #304]	; (80028c8 <HAL_RCC_OscConfig+0x66c>)
 8002796:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002798:	2380      	movs	r3, #128	; 0x80
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	4013      	ands	r3, r2
 800279e:	d0ef      	beq.n	8002780 <HAL_RCC_OscConfig+0x524>
 80027a0:	e014      	b.n	80027cc <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a2:	f7fe fcb7 	bl	8001114 <HAL_GetTick>
 80027a6:	0003      	movs	r3, r0
 80027a8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80027aa:	e009      	b.n	80027c0 <HAL_RCC_OscConfig+0x564>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027ac:	f7fe fcb2 	bl	8001114 <HAL_GetTick>
 80027b0:	0002      	movs	r2, r0
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	4a48      	ldr	r2, [pc, #288]	; (80028d8 <HAL_RCC_OscConfig+0x67c>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x564>
        {
          return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e0b1      	b.n	8002924 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80027c0:	4b41      	ldr	r3, [pc, #260]	; (80028c8 <HAL_RCC_OscConfig+0x66c>)
 80027c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027c4:	2380      	movs	r3, #128	; 0x80
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4013      	ands	r3, r2
 80027ca:	d1ef      	bne.n	80027ac <HAL_RCC_OscConfig+0x550>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80027cc:	2327      	movs	r3, #39	; 0x27
 80027ce:	18fb      	adds	r3, r7, r3
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d105      	bne.n	80027e2 <HAL_RCC_OscConfig+0x586>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027d6:	4b3c      	ldr	r3, [pc, #240]	; (80028c8 <HAL_RCC_OscConfig+0x66c>)
 80027d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027da:	4b3b      	ldr	r3, [pc, #236]	; (80028c8 <HAL_RCC_OscConfig+0x66c>)
 80027dc:	493f      	ldr	r1, [pc, #252]	; (80028dc <HAL_RCC_OscConfig+0x680>)
 80027de:	400a      	ands	r2, r1
 80027e0:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d100      	bne.n	80027ec <HAL_RCC_OscConfig+0x590>
 80027ea:	e09a      	b.n	8002922 <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	2b0c      	cmp	r3, #12
 80027f0:	d064      	beq.n	80028bc <HAL_RCC_OscConfig+0x660>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d145      	bne.n	8002886 <HAL_RCC_OscConfig+0x62a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027fa:	4b33      	ldr	r3, [pc, #204]	; (80028c8 <HAL_RCC_OscConfig+0x66c>)
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	4b32      	ldr	r3, [pc, #200]	; (80028c8 <HAL_RCC_OscConfig+0x66c>)
 8002800:	4937      	ldr	r1, [pc, #220]	; (80028e0 <HAL_RCC_OscConfig+0x684>)
 8002802:	400a      	ands	r2, r1
 8002804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002806:	f7fe fc85 	bl	8001114 <HAL_GetTick>
 800280a:	0003      	movs	r3, r0
 800280c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0x5c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002810:	f7fe fc80 	bl	8001114 <HAL_GetTick>
 8002814:	0002      	movs	r2, r0
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x5c6>
          {
            return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e080      	b.n	8002924 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002822:	4b29      	ldr	r3, [pc, #164]	; (80028c8 <HAL_RCC_OscConfig+0x66c>)
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	2380      	movs	r3, #128	; 0x80
 8002828:	049b      	lsls	r3, r3, #18
 800282a:	4013      	ands	r3, r2
 800282c:	d1f0      	bne.n	8002810 <HAL_RCC_OscConfig+0x5b4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800282e:	4b26      	ldr	r3, [pc, #152]	; (80028c8 <HAL_RCC_OscConfig+0x66c>)
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	4a2c      	ldr	r2, [pc, #176]	; (80028e4 <HAL_RCC_OscConfig+0x688>)
 8002834:	4013      	ands	r3, r2
 8002836:	0019      	movs	r1, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002840:	431a      	orrs	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	431a      	orrs	r2, r3
 8002848:	4b1f      	ldr	r3, [pc, #124]	; (80028c8 <HAL_RCC_OscConfig+0x66c>)
 800284a:	430a      	orrs	r2, r1
 800284c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800284e:	4b1e      	ldr	r3, [pc, #120]	; (80028c8 <HAL_RCC_OscConfig+0x66c>)
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	4b1d      	ldr	r3, [pc, #116]	; (80028c8 <HAL_RCC_OscConfig+0x66c>)
 8002854:	2180      	movs	r1, #128	; 0x80
 8002856:	0449      	lsls	r1, r1, #17
 8002858:	430a      	orrs	r2, r1
 800285a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800285c:	f7fe fc5a 	bl	8001114 <HAL_GetTick>
 8002860:	0003      	movs	r3, r0
 8002862:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002864:	e008      	b.n	8002878 <HAL_RCC_OscConfig+0x61c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002866:	f7fe fc55 	bl	8001114 <HAL_GetTick>
 800286a:	0002      	movs	r2, r0
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e055      	b.n	8002924 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002878:	4b13      	ldr	r3, [pc, #76]	; (80028c8 <HAL_RCC_OscConfig+0x66c>)
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	2380      	movs	r3, #128	; 0x80
 800287e:	049b      	lsls	r3, r3, #18
 8002880:	4013      	ands	r3, r2
 8002882:	d0f0      	beq.n	8002866 <HAL_RCC_OscConfig+0x60a>
 8002884:	e04d      	b.n	8002922 <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002886:	4b10      	ldr	r3, [pc, #64]	; (80028c8 <HAL_RCC_OscConfig+0x66c>)
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	4b0f      	ldr	r3, [pc, #60]	; (80028c8 <HAL_RCC_OscConfig+0x66c>)
 800288c:	4914      	ldr	r1, [pc, #80]	; (80028e0 <HAL_RCC_OscConfig+0x684>)
 800288e:	400a      	ands	r2, r1
 8002890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002892:	f7fe fc3f 	bl	8001114 <HAL_GetTick>
 8002896:	0003      	movs	r3, r0
 8002898:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0x652>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800289c:	f7fe fc3a 	bl	8001114 <HAL_GetTick>
 80028a0:	0002      	movs	r2, r0
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x652>
          {
            return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e03a      	b.n	8002924 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80028ae:	4b06      	ldr	r3, [pc, #24]	; (80028c8 <HAL_RCC_OscConfig+0x66c>)
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	2380      	movs	r3, #128	; 0x80
 80028b4:	049b      	lsls	r3, r3, #18
 80028b6:	4013      	ands	r3, r2
 80028b8:	d1f0      	bne.n	800289c <HAL_RCC_OscConfig+0x640>
 80028ba:	e032      	b.n	8002922 <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d111      	bne.n	80028e8 <HAL_RCC_OscConfig+0x68c>
      {
        return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e02d      	b.n	8002924 <HAL_RCC_OscConfig+0x6c8>
 80028c8:	40021000 	.word	0x40021000
 80028cc:	fffffeff 	.word	0xfffffeff
 80028d0:	40007000 	.word	0x40007000
 80028d4:	fffffbff 	.word	0xfffffbff
 80028d8:	00001388 	.word	0x00001388
 80028dc:	efffffff 	.word	0xefffffff
 80028e0:	feffffff 	.word	0xfeffffff
 80028e4:	ff02ffff 	.word	0xff02ffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028e8:	4b10      	ldr	r3, [pc, #64]	; (800292c <HAL_RCC_OscConfig+0x6d0>)
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ee:	69fa      	ldr	r2, [r7, #28]
 80028f0:	2380      	movs	r3, #128	; 0x80
 80028f2:	025b      	lsls	r3, r3, #9
 80028f4:	401a      	ands	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d10f      	bne.n	800291e <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80028fe:	69fa      	ldr	r2, [r7, #28]
 8002900:	23f0      	movs	r3, #240	; 0xf0
 8002902:	039b      	lsls	r3, r3, #14
 8002904:	401a      	ands	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800290a:	429a      	cmp	r2, r3
 800290c:	d107      	bne.n	800291e <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800290e:	69fa      	ldr	r2, [r7, #28]
 8002910:	23c0      	movs	r3, #192	; 0xc0
 8002912:	041b      	lsls	r3, r3, #16
 8002914:	401a      	ands	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800291a:	429a      	cmp	r2, r3
 800291c:	d001      	beq.n	8002922 <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e000      	b.n	8002924 <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }
  return HAL_OK;
 8002922:	2300      	movs	r3, #0
}
 8002924:	0018      	movs	r0, r3
 8002926:	46bd      	mov	sp, r7
 8002928:	b00a      	add	sp, #40	; 0x28
 800292a:	bdb0      	pop	{r4, r5, r7, pc}
 800292c:	40021000 	.word	0x40021000

08002930 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002930:	b5b0      	push	{r4, r5, r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d101      	bne.n	8002944 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e128      	b.n	8002b96 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002944:	4b96      	ldr	r3, [pc, #600]	; (8002ba0 <HAL_RCC_ClockConfig+0x270>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2201      	movs	r2, #1
 800294a:	4013      	ands	r3, r2
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	429a      	cmp	r2, r3
 8002950:	d91e      	bls.n	8002990 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002952:	4b93      	ldr	r3, [pc, #588]	; (8002ba0 <HAL_RCC_ClockConfig+0x270>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2201      	movs	r2, #1
 8002958:	4393      	bics	r3, r2
 800295a:	0019      	movs	r1, r3
 800295c:	4b90      	ldr	r3, [pc, #576]	; (8002ba0 <HAL_RCC_ClockConfig+0x270>)
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	430a      	orrs	r2, r1
 8002962:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002964:	f7fe fbd6 	bl	8001114 <HAL_GetTick>
 8002968:	0003      	movs	r3, r0
 800296a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800296c:	e009      	b.n	8002982 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800296e:	f7fe fbd1 	bl	8001114 <HAL_GetTick>
 8002972:	0002      	movs	r2, r0
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	4a8a      	ldr	r2, [pc, #552]	; (8002ba4 <HAL_RCC_ClockConfig+0x274>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e109      	b.n	8002b96 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002982:	4b87      	ldr	r3, [pc, #540]	; (8002ba0 <HAL_RCC_ClockConfig+0x270>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2201      	movs	r2, #1
 8002988:	4013      	ands	r3, r2
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	429a      	cmp	r2, r3
 800298e:	d1ee      	bne.n	800296e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2202      	movs	r2, #2
 8002996:	4013      	ands	r3, r2
 8002998:	d009      	beq.n	80029ae <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800299a:	4b83      	ldr	r3, [pc, #524]	; (8002ba8 <HAL_RCC_ClockConfig+0x278>)
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	22f0      	movs	r2, #240	; 0xf0
 80029a0:	4393      	bics	r3, r2
 80029a2:	0019      	movs	r1, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	4b7f      	ldr	r3, [pc, #508]	; (8002ba8 <HAL_RCC_ClockConfig+0x278>)
 80029aa:	430a      	orrs	r2, r1
 80029ac:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2201      	movs	r2, #1
 80029b4:	4013      	ands	r3, r2
 80029b6:	d100      	bne.n	80029ba <HAL_RCC_ClockConfig+0x8a>
 80029b8:	e089      	b.n	8002ace <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d107      	bne.n	80029d2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80029c2:	4b79      	ldr	r3, [pc, #484]	; (8002ba8 <HAL_RCC_ClockConfig+0x278>)
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	2380      	movs	r3, #128	; 0x80
 80029c8:	029b      	lsls	r3, r3, #10
 80029ca:	4013      	ands	r3, r2
 80029cc:	d120      	bne.n	8002a10 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e0e1      	b.n	8002b96 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	2b03      	cmp	r3, #3
 80029d8:	d107      	bne.n	80029ea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029da:	4b73      	ldr	r3, [pc, #460]	; (8002ba8 <HAL_RCC_ClockConfig+0x278>)
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	2380      	movs	r3, #128	; 0x80
 80029e0:	049b      	lsls	r3, r3, #18
 80029e2:	4013      	ands	r3, r2
 80029e4:	d114      	bne.n	8002a10 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e0d5      	b.n	8002b96 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d106      	bne.n	8002a00 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029f2:	4b6d      	ldr	r3, [pc, #436]	; (8002ba8 <HAL_RCC_ClockConfig+0x278>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2204      	movs	r2, #4
 80029f8:	4013      	ands	r3, r2
 80029fa:	d109      	bne.n	8002a10 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e0ca      	b.n	8002b96 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002a00:	4b69      	ldr	r3, [pc, #420]	; (8002ba8 <HAL_RCC_ClockConfig+0x278>)
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	2380      	movs	r3, #128	; 0x80
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4013      	ands	r3, r2
 8002a0a:	d101      	bne.n	8002a10 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e0c2      	b.n	8002b96 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a10:	4b65      	ldr	r3, [pc, #404]	; (8002ba8 <HAL_RCC_ClockConfig+0x278>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	2203      	movs	r2, #3
 8002a16:	4393      	bics	r3, r2
 8002a18:	0019      	movs	r1, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685a      	ldr	r2, [r3, #4]
 8002a1e:	4b62      	ldr	r3, [pc, #392]	; (8002ba8 <HAL_RCC_ClockConfig+0x278>)
 8002a20:	430a      	orrs	r2, r1
 8002a22:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a24:	f7fe fb76 	bl	8001114 <HAL_GetTick>
 8002a28:	0003      	movs	r3, r0
 8002a2a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d111      	bne.n	8002a58 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a34:	e009      	b.n	8002a4a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a36:	f7fe fb6d 	bl	8001114 <HAL_GetTick>
 8002a3a:	0002      	movs	r2, r0
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	4a58      	ldr	r2, [pc, #352]	; (8002ba4 <HAL_RCC_ClockConfig+0x274>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e0a5      	b.n	8002b96 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a4a:	4b57      	ldr	r3, [pc, #348]	; (8002ba8 <HAL_RCC_ClockConfig+0x278>)
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	220c      	movs	r2, #12
 8002a50:	4013      	ands	r3, r2
 8002a52:	2b08      	cmp	r3, #8
 8002a54:	d1ef      	bne.n	8002a36 <HAL_RCC_ClockConfig+0x106>
 8002a56:	e03a      	b.n	8002ace <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	2b03      	cmp	r3, #3
 8002a5e:	d111      	bne.n	8002a84 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a60:	e009      	b.n	8002a76 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a62:	f7fe fb57 	bl	8001114 <HAL_GetTick>
 8002a66:	0002      	movs	r2, r0
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	4a4d      	ldr	r2, [pc, #308]	; (8002ba4 <HAL_RCC_ClockConfig+0x274>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e08f      	b.n	8002b96 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a76:	4b4c      	ldr	r3, [pc, #304]	; (8002ba8 <HAL_RCC_ClockConfig+0x278>)
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	220c      	movs	r2, #12
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	2b0c      	cmp	r3, #12
 8002a80:	d1ef      	bne.n	8002a62 <HAL_RCC_ClockConfig+0x132>
 8002a82:	e024      	b.n	8002ace <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d11b      	bne.n	8002ac4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a8c:	e009      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a8e:	f7fe fb41 	bl	8001114 <HAL_GetTick>
 8002a92:	0002      	movs	r2, r0
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	4a42      	ldr	r2, [pc, #264]	; (8002ba4 <HAL_RCC_ClockConfig+0x274>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e079      	b.n	8002b96 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002aa2:	4b41      	ldr	r3, [pc, #260]	; (8002ba8 <HAL_RCC_ClockConfig+0x278>)
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	220c      	movs	r2, #12
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	2b04      	cmp	r3, #4
 8002aac:	d1ef      	bne.n	8002a8e <HAL_RCC_ClockConfig+0x15e>
 8002aae:	e00e      	b.n	8002ace <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ab0:	f7fe fb30 	bl	8001114 <HAL_GetTick>
 8002ab4:	0002      	movs	r2, r0
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	4a3a      	ldr	r2, [pc, #232]	; (8002ba4 <HAL_RCC_ClockConfig+0x274>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e068      	b.n	8002b96 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002ac4:	4b38      	ldr	r3, [pc, #224]	; (8002ba8 <HAL_RCC_ClockConfig+0x278>)
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	220c      	movs	r2, #12
 8002aca:	4013      	ands	r3, r2
 8002acc:	d1f0      	bne.n	8002ab0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ace:	4b34      	ldr	r3, [pc, #208]	; (8002ba0 <HAL_RCC_ClockConfig+0x270>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	683a      	ldr	r2, [r7, #0]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d21e      	bcs.n	8002b1a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002adc:	4b30      	ldr	r3, [pc, #192]	; (8002ba0 <HAL_RCC_ClockConfig+0x270>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	4393      	bics	r3, r2
 8002ae4:	0019      	movs	r1, r3
 8002ae6:	4b2e      	ldr	r3, [pc, #184]	; (8002ba0 <HAL_RCC_ClockConfig+0x270>)
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	430a      	orrs	r2, r1
 8002aec:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002aee:	f7fe fb11 	bl	8001114 <HAL_GetTick>
 8002af2:	0003      	movs	r3, r0
 8002af4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af6:	e009      	b.n	8002b0c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002af8:	f7fe fb0c 	bl	8001114 <HAL_GetTick>
 8002afc:	0002      	movs	r2, r0
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	4a28      	ldr	r2, [pc, #160]	; (8002ba4 <HAL_RCC_ClockConfig+0x274>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e044      	b.n	8002b96 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b0c:	4b24      	ldr	r3, [pc, #144]	; (8002ba0 <HAL_RCC_ClockConfig+0x270>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2201      	movs	r2, #1
 8002b12:	4013      	ands	r3, r2
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d1ee      	bne.n	8002af8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2204      	movs	r2, #4
 8002b20:	4013      	ands	r3, r2
 8002b22:	d009      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b24:	4b20      	ldr	r3, [pc, #128]	; (8002ba8 <HAL_RCC_ClockConfig+0x278>)
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	4a20      	ldr	r2, [pc, #128]	; (8002bac <HAL_RCC_ClockConfig+0x27c>)
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	0019      	movs	r1, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68da      	ldr	r2, [r3, #12]
 8002b32:	4b1d      	ldr	r3, [pc, #116]	; (8002ba8 <HAL_RCC_ClockConfig+0x278>)
 8002b34:	430a      	orrs	r2, r1
 8002b36:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2208      	movs	r2, #8
 8002b3e:	4013      	ands	r3, r2
 8002b40:	d00a      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b42:	4b19      	ldr	r3, [pc, #100]	; (8002ba8 <HAL_RCC_ClockConfig+0x278>)
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	4a1a      	ldr	r2, [pc, #104]	; (8002bb0 <HAL_RCC_ClockConfig+0x280>)
 8002b48:	4013      	ands	r3, r2
 8002b4a:	0019      	movs	r1, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	00da      	lsls	r2, r3, #3
 8002b52:	4b15      	ldr	r3, [pc, #84]	; (8002ba8 <HAL_RCC_ClockConfig+0x278>)
 8002b54:	430a      	orrs	r2, r1
 8002b56:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b58:	f000 f832 	bl	8002bc0 <HAL_RCC_GetSysClockFreq>
 8002b5c:	0001      	movs	r1, r0
 8002b5e:	4b12      	ldr	r3, [pc, #72]	; (8002ba8 <HAL_RCC_ClockConfig+0x278>)
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	091b      	lsrs	r3, r3, #4
 8002b64:	220f      	movs	r2, #15
 8002b66:	4013      	ands	r3, r2
 8002b68:	4a12      	ldr	r2, [pc, #72]	; (8002bb4 <HAL_RCC_ClockConfig+0x284>)
 8002b6a:	5cd3      	ldrb	r3, [r2, r3]
 8002b6c:	000a      	movs	r2, r1
 8002b6e:	40da      	lsrs	r2, r3
 8002b70:	4b11      	ldr	r3, [pc, #68]	; (8002bb8 <HAL_RCC_ClockConfig+0x288>)
 8002b72:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b74:	4b11      	ldr	r3, [pc, #68]	; (8002bbc <HAL_RCC_ClockConfig+0x28c>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	250b      	movs	r5, #11
 8002b7a:	197c      	adds	r4, r7, r5
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	f7fe fa83 	bl	8001088 <HAL_InitTick>
 8002b82:	0003      	movs	r3, r0
 8002b84:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002b86:	197b      	adds	r3, r7, r5
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d002      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002b8e:	197b      	adds	r3, r7, r5
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	e000      	b.n	8002b96 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	0018      	movs	r0, r3
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	b004      	add	sp, #16
 8002b9c:	bdb0      	pop	{r4, r5, r7, pc}
 8002b9e:	46c0      	nop			; (mov r8, r8)
 8002ba0:	40022000 	.word	0x40022000
 8002ba4:	00001388 	.word	0x00001388
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	fffff8ff 	.word	0xfffff8ff
 8002bb0:	ffffc7ff 	.word	0xffffc7ff
 8002bb4:	08003038 	.word	0x08003038
 8002bb8:	20000000 	.word	0x20000000
 8002bbc:	20000004 	.word	0x20000004

08002bc0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002bc6:	4b3c      	ldr	r3, [pc, #240]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	220c      	movs	r2, #12
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	2b0c      	cmp	r3, #12
 8002bd4:	d013      	beq.n	8002bfe <HAL_RCC_GetSysClockFreq+0x3e>
 8002bd6:	d85c      	bhi.n	8002c92 <HAL_RCC_GetSysClockFreq+0xd2>
 8002bd8:	2b04      	cmp	r3, #4
 8002bda:	d002      	beq.n	8002be2 <HAL_RCC_GetSysClockFreq+0x22>
 8002bdc:	2b08      	cmp	r3, #8
 8002bde:	d00b      	beq.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x38>
 8002be0:	e057      	b.n	8002c92 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002be2:	4b35      	ldr	r3, [pc, #212]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2210      	movs	r2, #16
 8002be8:	4013      	ands	r3, r2
 8002bea:	d002      	beq.n	8002bf2 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002bec:	4b33      	ldr	r3, [pc, #204]	; (8002cbc <HAL_RCC_GetSysClockFreq+0xfc>)
 8002bee:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002bf0:	e05d      	b.n	8002cae <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8002bf2:	4b33      	ldr	r3, [pc, #204]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0x100>)
 8002bf4:	613b      	str	r3, [r7, #16]
      break;
 8002bf6:	e05a      	b.n	8002cae <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bf8:	4b32      	ldr	r3, [pc, #200]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002bfa:	613b      	str	r3, [r7, #16]
      break;
 8002bfc:	e057      	b.n	8002cae <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	0c9b      	lsrs	r3, r3, #18
 8002c02:	220f      	movs	r2, #15
 8002c04:	4013      	ands	r3, r2
 8002c06:	4a30      	ldr	r2, [pc, #192]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c08:	5cd3      	ldrb	r3, [r2, r3]
 8002c0a:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	0d9b      	lsrs	r3, r3, #22
 8002c10:	2203      	movs	r2, #3
 8002c12:	4013      	ands	r3, r2
 8002c14:	3301      	adds	r3, #1
 8002c16:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c18:	4b27      	ldr	r3, [pc, #156]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c1a:	68da      	ldr	r2, [r3, #12]
 8002c1c:	2380      	movs	r3, #128	; 0x80
 8002c1e:	025b      	lsls	r3, r3, #9
 8002c20:	4013      	ands	r3, r2
 8002c22:	d00f      	beq.n	8002c44 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8002c24:	68b9      	ldr	r1, [r7, #8]
 8002c26:	000a      	movs	r2, r1
 8002c28:	0152      	lsls	r2, r2, #5
 8002c2a:	1a52      	subs	r2, r2, r1
 8002c2c:	0193      	lsls	r3, r2, #6
 8002c2e:	1a9b      	subs	r3, r3, r2
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	185b      	adds	r3, r3, r1
 8002c34:	025b      	lsls	r3, r3, #9
 8002c36:	6879      	ldr	r1, [r7, #4]
 8002c38:	0018      	movs	r0, r3
 8002c3a:	f7fd fa65 	bl	8000108 <__udivsi3>
 8002c3e:	0003      	movs	r3, r0
 8002c40:	617b      	str	r3, [r7, #20]
 8002c42:	e023      	b.n	8002c8c <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002c44:	4b1c      	ldr	r3, [pc, #112]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2210      	movs	r2, #16
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	d00f      	beq.n	8002c6e <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8002c4e:	68b9      	ldr	r1, [r7, #8]
 8002c50:	000a      	movs	r2, r1
 8002c52:	0152      	lsls	r2, r2, #5
 8002c54:	1a52      	subs	r2, r2, r1
 8002c56:	0193      	lsls	r3, r2, #6
 8002c58:	1a9b      	subs	r3, r3, r2
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	185b      	adds	r3, r3, r1
 8002c5e:	021b      	lsls	r3, r3, #8
 8002c60:	6879      	ldr	r1, [r7, #4]
 8002c62:	0018      	movs	r0, r3
 8002c64:	f7fd fa50 	bl	8000108 <__udivsi3>
 8002c68:	0003      	movs	r3, r0
 8002c6a:	617b      	str	r3, [r7, #20]
 8002c6c:	e00e      	b.n	8002c8c <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8002c6e:	68b9      	ldr	r1, [r7, #8]
 8002c70:	000a      	movs	r2, r1
 8002c72:	0152      	lsls	r2, r2, #5
 8002c74:	1a52      	subs	r2, r2, r1
 8002c76:	0193      	lsls	r3, r2, #6
 8002c78:	1a9b      	subs	r3, r3, r2
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	185b      	adds	r3, r3, r1
 8002c7e:	029b      	lsls	r3, r3, #10
 8002c80:	6879      	ldr	r1, [r7, #4]
 8002c82:	0018      	movs	r0, r3
 8002c84:	f7fd fa40 	bl	8000108 <__udivsi3>
 8002c88:	0003      	movs	r3, r0
 8002c8a:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	613b      	str	r3, [r7, #16]
      break;
 8002c90:	e00d      	b.n	8002cae <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002c92:	4b09      	ldr	r3, [pc, #36]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	0b5b      	lsrs	r3, r3, #13
 8002c98:	2207      	movs	r2, #7
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	2280      	movs	r2, #128	; 0x80
 8002ca4:	0212      	lsls	r2, r2, #8
 8002ca6:	409a      	lsls	r2, r3
 8002ca8:	0013      	movs	r3, r2
 8002caa:	613b      	str	r3, [r7, #16]
      break;
 8002cac:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002cae:	693b      	ldr	r3, [r7, #16]
}
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	b006      	add	sp, #24
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	003d0900 	.word	0x003d0900
 8002cc0:	00f42400 	.word	0x00f42400
 8002cc4:	007a1200 	.word	0x007a1200
 8002cc8:	08003048 	.word	0x08003048

08002ccc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002cd4:	2017      	movs	r0, #23
 8002cd6:	183b      	adds	r3, r7, r0
 8002cd8:	2200      	movs	r2, #0
 8002cda:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	d100      	bne.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002ce6:	e0c7      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ce8:	4b8b      	ldr	r3, [pc, #556]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002cea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cec:	2380      	movs	r3, #128	; 0x80
 8002cee:	055b      	lsls	r3, r3, #21
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	d109      	bne.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cf4:	4b88      	ldr	r3, [pc, #544]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002cf6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cf8:	4b87      	ldr	r3, [pc, #540]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002cfa:	2180      	movs	r1, #128	; 0x80
 8002cfc:	0549      	lsls	r1, r1, #21
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002d02:	183b      	adds	r3, r7, r0
 8002d04:	2201      	movs	r2, #1
 8002d06:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d08:	4b84      	ldr	r3, [pc, #528]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	2380      	movs	r3, #128	; 0x80
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	4013      	ands	r3, r2
 8002d12:	d11a      	bne.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d14:	4b81      	ldr	r3, [pc, #516]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	4b80      	ldr	r3, [pc, #512]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002d1a:	2180      	movs	r1, #128	; 0x80
 8002d1c:	0049      	lsls	r1, r1, #1
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d22:	f7fe f9f7 	bl	8001114 <HAL_GetTick>
 8002d26:	0003      	movs	r3, r0
 8002d28:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d2a:	e008      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d2c:	f7fe f9f2 	bl	8001114 <HAL_GetTick>
 8002d30:	0002      	movs	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b64      	cmp	r3, #100	; 0x64
 8002d38:	d901      	bls.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e0e8      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x244>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d3e:	4b77      	ldr	r3, [pc, #476]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	2380      	movs	r3, #128	; 0x80
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	4013      	ands	r3, r2
 8002d48:	d0f0      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002d4a:	4b73      	ldr	r3, [pc, #460]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	23c0      	movs	r3, #192	; 0xc0
 8002d50:	039b      	lsls	r3, r3, #14
 8002d52:	4013      	ands	r3, r2
 8002d54:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	23c0      	movs	r3, #192	; 0xc0
 8002d5c:	039b      	lsls	r3, r3, #14
 8002d5e:	4013      	ands	r3, r2
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d013      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685a      	ldr	r2, [r3, #4]
 8002d6a:	23c0      	movs	r3, #192	; 0xc0
 8002d6c:	029b      	lsls	r3, r3, #10
 8002d6e:	401a      	ands	r2, r3
 8002d70:	23c0      	movs	r3, #192	; 0xc0
 8002d72:	029b      	lsls	r3, r3, #10
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d10a      	bne.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002d78:	4b67      	ldr	r3, [pc, #412]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	2380      	movs	r3, #128	; 0x80
 8002d7e:	029b      	lsls	r3, r3, #10
 8002d80:	401a      	ands	r2, r3
 8002d82:	2380      	movs	r3, #128	; 0x80
 8002d84:	029b      	lsls	r3, r3, #10
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d101      	bne.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e0c0      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x244>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002d8e:	4b62      	ldr	r3, [pc, #392]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002d90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d92:	23c0      	movs	r3, #192	; 0xc0
 8002d94:	029b      	lsls	r3, r3, #10
 8002d96:	4013      	ands	r3, r2
 8002d98:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d03b      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685a      	ldr	r2, [r3, #4]
 8002da4:	23c0      	movs	r3, #192	; 0xc0
 8002da6:	029b      	lsls	r3, r3, #10
 8002da8:	4013      	ands	r3, r2
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d033      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2220      	movs	r2, #32
 8002db6:	4013      	ands	r3, r2
 8002db8:	d02e      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002dba:	4b57      	ldr	r3, [pc, #348]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002dbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dbe:	4a58      	ldr	r2, [pc, #352]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002dc4:	4b54      	ldr	r3, [pc, #336]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002dc6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002dc8:	4b53      	ldr	r3, [pc, #332]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002dca:	2180      	movs	r1, #128	; 0x80
 8002dcc:	0309      	lsls	r1, r1, #12
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002dd2:	4b51      	ldr	r3, [pc, #324]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002dd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002dd6:	4b50      	ldr	r3, [pc, #320]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002dd8:	4952      	ldr	r1, [pc, #328]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002dda:	400a      	ands	r2, r1
 8002ddc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002dde:	4b4e      	ldr	r3, [pc, #312]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	2380      	movs	r3, #128	; 0x80
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	4013      	ands	r3, r2
 8002dec:	d014      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dee:	f7fe f991 	bl	8001114 <HAL_GetTick>
 8002df2:	0003      	movs	r3, r0
 8002df4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002df6:	e009      	b.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002df8:	f7fe f98c 	bl	8001114 <HAL_GetTick>
 8002dfc:	0002      	movs	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	4a49      	ldr	r2, [pc, #292]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e081      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e0c:	4b42      	ldr	r3, [pc, #264]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002e0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e10:	2380      	movs	r3, #128	; 0x80
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	4013      	ands	r3, r2
 8002e16:	d0ef      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2220      	movs	r2, #32
 8002e1e:	4013      	ands	r3, r2
 8002e20:	d01f      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685a      	ldr	r2, [r3, #4]
 8002e26:	23c0      	movs	r3, #192	; 0xc0
 8002e28:	029b      	lsls	r3, r3, #10
 8002e2a:	401a      	ands	r2, r3
 8002e2c:	23c0      	movs	r3, #192	; 0xc0
 8002e2e:	029b      	lsls	r3, r3, #10
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d10c      	bne.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x182>
 8002e34:	4b38      	ldr	r3, [pc, #224]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a3c      	ldr	r2, [pc, #240]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	0019      	movs	r1, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685a      	ldr	r2, [r3, #4]
 8002e42:	23c0      	movs	r3, #192	; 0xc0
 8002e44:	039b      	lsls	r3, r3, #14
 8002e46:	401a      	ands	r2, r3
 8002e48:	4b33      	ldr	r3, [pc, #204]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	601a      	str	r2, [r3, #0]
 8002e4e:	4b32      	ldr	r3, [pc, #200]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002e50:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685a      	ldr	r2, [r3, #4]
 8002e56:	23c0      	movs	r3, #192	; 0xc0
 8002e58:	029b      	lsls	r3, r3, #10
 8002e5a:	401a      	ands	r2, r3
 8002e5c:	4b2e      	ldr	r3, [pc, #184]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e62:	2317      	movs	r3, #23
 8002e64:	18fb      	adds	r3, r7, r3
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d105      	bne.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e6c:	4b2a      	ldr	r3, [pc, #168]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002e6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e70:	4b29      	ldr	r3, [pc, #164]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002e72:	492f      	ldr	r1, [pc, #188]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e74:	400a      	ands	r2, r1
 8002e76:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	4013      	ands	r3, r2
 8002e80:	d009      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e82:	4b25      	ldr	r3, [pc, #148]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e86:	2203      	movs	r2, #3
 8002e88:	4393      	bics	r3, r2
 8002e8a:	0019      	movs	r1, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	4b21      	ldr	r3, [pc, #132]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002e92:	430a      	orrs	r2, r1
 8002e94:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	d009      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ea0:	4b1d      	ldr	r3, [pc, #116]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002ea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ea4:	220c      	movs	r2, #12
 8002ea6:	4393      	bics	r3, r2
 8002ea8:	0019      	movs	r1, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	68da      	ldr	r2, [r3, #12]
 8002eae:	4b1a      	ldr	r3, [pc, #104]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2204      	movs	r2, #4
 8002eba:	4013      	ands	r3, r2
 8002ebc:	d009      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ebe:	4b16      	ldr	r3, [pc, #88]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ec2:	4a1c      	ldr	r2, [pc, #112]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	0019      	movs	r1, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	691a      	ldr	r2, [r3, #16]
 8002ecc:	4b12      	ldr	r3, [pc, #72]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2208      	movs	r2, #8
 8002ed8:	4013      	ands	r3, r2
 8002eda:	d009      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002edc:	4b0e      	ldr	r3, [pc, #56]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002ede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ee0:	4a15      	ldr	r2, [pc, #84]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	0019      	movs	r1, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	695a      	ldr	r2, [r3, #20]
 8002eea:	4b0b      	ldr	r3, [pc, #44]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002eec:	430a      	orrs	r2, r1
 8002eee:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2280      	movs	r2, #128	; 0x80
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	d009      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002efa:	4b07      	ldr	r3, [pc, #28]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002efe:	4a0f      	ldr	r2, [pc, #60]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8002f00:	4013      	ands	r3, r2
 8002f02:	0019      	movs	r1, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	699a      	ldr	r2, [r3, #24]
 8002f08:	4b03      	ldr	r3, [pc, #12]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	0018      	movs	r0, r3
 8002f12:	46bd      	mov	sp, r7
 8002f14:	b006      	add	sp, #24
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	40007000 	.word	0x40007000
 8002f20:	fffcffff 	.word	0xfffcffff
 8002f24:	fff7ffff 	.word	0xfff7ffff
 8002f28:	00001388 	.word	0x00001388
 8002f2c:	ffcfffff 	.word	0xffcfffff
 8002f30:	efffffff 	.word	0xefffffff
 8002f34:	fffff3ff 	.word	0xfffff3ff
 8002f38:	ffffcfff 	.word	0xffffcfff
 8002f3c:	fff3ffff 	.word	0xfff3ffff

08002f40 <memset>:
 8002f40:	0003      	movs	r3, r0
 8002f42:	1882      	adds	r2, r0, r2
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d100      	bne.n	8002f4a <memset+0xa>
 8002f48:	4770      	bx	lr
 8002f4a:	7019      	strb	r1, [r3, #0]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	e7f9      	b.n	8002f44 <memset+0x4>

08002f50 <__libc_init_array>:
 8002f50:	b570      	push	{r4, r5, r6, lr}
 8002f52:	2600      	movs	r6, #0
 8002f54:	4c0c      	ldr	r4, [pc, #48]	; (8002f88 <__libc_init_array+0x38>)
 8002f56:	4d0d      	ldr	r5, [pc, #52]	; (8002f8c <__libc_init_array+0x3c>)
 8002f58:	1b64      	subs	r4, r4, r5
 8002f5a:	10a4      	asrs	r4, r4, #2
 8002f5c:	42a6      	cmp	r6, r4
 8002f5e:	d109      	bne.n	8002f74 <__libc_init_array+0x24>
 8002f60:	2600      	movs	r6, #0
 8002f62:	f000 f819 	bl	8002f98 <_init>
 8002f66:	4c0a      	ldr	r4, [pc, #40]	; (8002f90 <__libc_init_array+0x40>)
 8002f68:	4d0a      	ldr	r5, [pc, #40]	; (8002f94 <__libc_init_array+0x44>)
 8002f6a:	1b64      	subs	r4, r4, r5
 8002f6c:	10a4      	asrs	r4, r4, #2
 8002f6e:	42a6      	cmp	r6, r4
 8002f70:	d105      	bne.n	8002f7e <__libc_init_array+0x2e>
 8002f72:	bd70      	pop	{r4, r5, r6, pc}
 8002f74:	00b3      	lsls	r3, r6, #2
 8002f76:	58eb      	ldr	r3, [r5, r3]
 8002f78:	4798      	blx	r3
 8002f7a:	3601      	adds	r6, #1
 8002f7c:	e7ee      	b.n	8002f5c <__libc_init_array+0xc>
 8002f7e:	00b3      	lsls	r3, r6, #2
 8002f80:	58eb      	ldr	r3, [r5, r3]
 8002f82:	4798      	blx	r3
 8002f84:	3601      	adds	r6, #1
 8002f86:	e7f2      	b.n	8002f6e <__libc_init_array+0x1e>
 8002f88:	08003054 	.word	0x08003054
 8002f8c:	08003054 	.word	0x08003054
 8002f90:	08003058 	.word	0x08003058
 8002f94:	08003054 	.word	0x08003054

08002f98 <_init>:
 8002f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f9a:	46c0      	nop			; (mov r8, r8)
 8002f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f9e:	bc08      	pop	{r3}
 8002fa0:	469e      	mov	lr, r3
 8002fa2:	4770      	bx	lr

08002fa4 <_fini>:
 8002fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fa6:	46c0      	nop			; (mov r8, r8)
 8002fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002faa:	bc08      	pop	{r3}
 8002fac:	469e      	mov	lr, r3
 8002fae:	4770      	bx	lr
